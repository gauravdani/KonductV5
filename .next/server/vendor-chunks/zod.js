"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zod";
exports.ids = ["vendor-chunks/zod"];
exports.modules = {

/***/ "(ssr)/./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   \"default\": () => (/* binding */ z),\n/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   util: () => (/* binding */ util),\n/* harmony export */   \"void\": () => (/* binding */ voidType),\n/* harmony export */   z: () => (/* binding */ z)\n/* harmony export */ });\nvar util;\n(function(util) {\n    util.assertEqual = (val)=>val;\n    function assertIs(_arg) {}\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items)=>{\n        const obj = {};\n        for (const item of items){\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj)=>{\n        const validKeys = util.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys){\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj)=>{\n        return util.objectKeys(obj).map(function(e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n     ? (obj)=>Object.keys(obj) // eslint-disable-line ban/ban\n     : (object)=>{\n        const keys = [];\n        for(const key in object){\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    util.find = (arr, checker)=>{\n        for (const item of arr){\n            if (checker(item)) return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\" ? (val)=>Number.isInteger(val) // eslint-disable-line ban/ban\n     : (val)=>typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val)=>typeof val === \"string\" ? `'${val}'` : val).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value)=>{\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil) {\n    objectUtil.mergeShapes = (first, second)=>{\n        return {\n            ...first,\n            ...second\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\"\n]);\nconst getParsedType = (data)=>{\n    const t = typeof data;\n    switch(t){\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\"\n]);\nconst quotelessJson = (obj)=>{\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues){\n        super();\n        this.issues = [];\n        this.addIssue = (sub)=>{\n            this.issues = [\n                ...this.issues,\n                sub\n            ];\n        };\n        this.addIssues = (subs = [])=>{\n            this.issues = [\n                ...this.issues,\n                ...subs\n            ];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        } else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper || function(issue) {\n            return issue.message;\n        };\n        const fieldErrors = {\n            _errors: []\n        };\n        const processError = (error)=>{\n            for (const issue of error.issues){\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                } else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                } else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                } else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                } else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while(i < issue.path.length){\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                        // if (typeof el === \"string\") {\n                        //   curr[el] = curr[el] || { _errors: [] };\n                        // } else if (typeof el === \"number\") {\n                        //   const errorArray: any = [];\n                        //   errorArray._errors = [];\n                        //   curr[el] = curr[el] || errorArray;\n                        // }\n                        } else {\n                            curr[el] = curr[el] || {\n                                _errors: []\n                            };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue)=>issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues){\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            } else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return {\n            formErrors,\n            fieldErrors\n        };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues)=>{\n    const error = new ZodError(issues);\n    return error;\n};\nconst errorMap = (issue, _ctx)=>{\n    let message;\n    switch(issue.code){\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            } else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                } else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                } else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                } else {\n                    util.assertNever(issue.validation);\n                }\n            } else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            } else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\") message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\") message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return {\n        message\n    };\n};\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\nconst makeIssue = (params)=>{\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [\n        ...path,\n        ...issueData.path || []\n    ];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps.filter((m)=>!!m).slice().reverse();\n    for (const map of maps){\n        errorMessage = map(fullIssue, {\n            data,\n            defaultError: errorMessage\n        }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            overrideMap,\n            overrideMap === errorMap ? undefined : errorMap\n        ].filter((x)=>!!x)\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor(){\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\") this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\") this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results){\n            if (s.status === \"aborted\") return INVALID;\n            if (s.status === \"dirty\") status.dirty();\n            arrayValue.push(s.value);\n        }\n        return {\n            status: status.value,\n            value: arrayValue\n        };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs){\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs){\n            const { key, value } = pair;\n            if (key.status === \"aborted\") return INVALID;\n            if (value.status === \"aborted\") return INVALID;\n            if (key.status === \"dirty\") status.dirty();\n            if (value.status === \"dirty\") status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return {\n            status: status.value,\n            value: finalObject\n        };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\"\n});\nconst DIRTY = (value)=>({\n        status: \"dirty\",\n        value\n    });\nconst OK = (value)=>({\n        status: \"valid\",\n        value\n    });\nconst isAborted = (x)=>x.status === \"aborted\";\nconst isDirty = (x)=>x.status === \"dirty\";\nconst isValid = (x)=>x.status === \"valid\";\nconst isAsync = (x)=>typeof Promise !== \"undefined\" && x instanceof Promise;\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nvar errorUtil;\n(function(errorUtil) {\n    errorUtil.errToObj = (message)=>typeof message === \"string\" ? {\n            message\n        } : message || {};\n    errorUtil.toString = (message)=>typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key){\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            } else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result)=>{\n    if (isValid(result)) {\n        return {\n            success: true,\n            data: result.value\n        };\n    } else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error () {\n                if (this._error) return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            }\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params) return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap) return {\n        errorMap: errorMap,\n        description\n    };\n    const customMap = (iss, ctx)=>{\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return {\n                message: message !== null && message !== void 0 ? message : ctx.defaultError\n            };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return {\n                message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError\n            };\n        }\n        if (iss.code !== \"invalid_type\") return {\n            message: ctx.defaultError\n        };\n        return {\n            message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError\n        };\n    };\n    return {\n        errorMap: customMap,\n        description\n    };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent\n        };\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent\n            }\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const result = this._parseSync({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({\n                    data,\n                    path: [],\n                    parent: ctx\n                });\n                return isValid(result) ? {\n                    value: result.value\n                } : {\n                    issues: ctx.common.issues\n                };\n            } catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true\n                };\n            }\n        }\n        return this._parseAsync({\n            data,\n            path: [],\n            parent: ctx\n        }).then((result)=>isValid(result) ? {\n                value: result.value\n            } : {\n                issues: ctx.common.issues\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success) return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data)\n        };\n        const maybeAsyncResult = this._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val)=>{\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return {\n                    message\n                };\n            } else if (typeof message === \"function\") {\n                return message(val);\n            } else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx)=>{\n            const result = check(val);\n            const setError = ()=>ctx.addIssue({\n                    code: ZodIssueCode.custom,\n                    ...getIssueProperties(val)\n                });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data)=>{\n                    if (!data) {\n                        setError();\n                        return false;\n                    } else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx)=>{\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            } else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"refinement\",\n                refinement\n            }\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def){\n        /** Alias of safeParseAsync */ this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data)=>this[\"~validate\"](data)\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([\n            this,\n            option\n        ], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: {\n                type: \"transform\",\n                transform\n            }\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def)\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : ()=>def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    } else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset) opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt)) return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null) return false;\n        if (!decoded.typ || !decoded.alg) return false;\n        if (alg && decoded.alg !== alg) return false;\n        return true;\n    } catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    } else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message\n                        });\n                    }\n                    status.dirty();\n                }\n            } else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                } catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            } else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            includes: check.value,\n                            position: check.position\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            } else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            } else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            startsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: {\n                            endsWith: check.value\n                        },\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data)=>regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    email(message) {\n        return this._addCheck({\n            kind: \"email\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    url(message) {\n        return this._addCheck({\n            kind: \"url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    emoji(message) {\n        return this._addCheck({\n            kind: \"emoji\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    uuid(message) {\n        return this._addCheck({\n            kind: \"uuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    nanoid(message) {\n        return this._addCheck({\n            kind: \"nanoid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid(message) {\n        return this._addCheck({\n            kind: \"cuid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    cuid2(message) {\n        return this._addCheck({\n            kind: \"cuid2\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    ulid(message) {\n        return this._addCheck({\n            kind: \"ulid\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    base64(message) {\n        return this._addCheck({\n            kind: \"base64\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    jwt(options) {\n        return this._addCheck({\n            kind: \"jwt\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    ip(options) {\n        return this._addCheck({\n            kind: \"ip\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    cidr(options) {\n        return this._addCheck({\n            kind: \"cidr\",\n            ...errorUtil.errToObj(options)\n        });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    date(message) {\n        return this._addCheck({\n            kind: \"date\",\n            message\n        });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    duration(message) {\n        return this._addCheck({\n            kind: \"duration\",\n            ...errorUtil.errToObj(message)\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message)\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */ nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"trim\"\n                }\n            ]\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toLowerCase\"\n                }\n            ]\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind: \"toUpperCase\"\n                }\n            ]\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch)=>ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params)=>{\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return valInt % stepInt / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message)\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message)\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message)\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch)=>ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            } else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            } else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params)=>{\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor(){\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            } catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: input.data\n        };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message)\n                }\n            ]\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message)\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message)\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params)=>{\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params)=>{\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks){\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\"\n                    });\n                    status.dirty();\n                }\n            } else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime())\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                check\n            ]\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message)\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min) min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks){\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max) max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params)=>{\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params)=>{\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params)=>{\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params)=>{\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params)\n    });\n};\nclass ZodAny extends ZodType {\n    constructor(){\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params)=>{\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor(){\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params)=>{\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params)=>{\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params)\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params)=>{\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params)\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: tooSmall ? def.exactLength.value : undefined,\n                    maximum: tooBig ? def.exactLength.value : undefined,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([\n                ...ctx.data\n            ].map((item, i)=>{\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result)=>{\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [\n            ...ctx.data\n        ].map((item, i)=>{\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: {\n                value: minLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: {\n                value: maxLength,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: {\n                value: len,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params)=>{\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params)\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for(const key in schema.shape){\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: ()=>newShape\n        });\n    } else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element)\n        });\n    } else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    } else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));\n    } else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor(){\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */ this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */ this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null) return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return this._cached = {\n            shape,\n            keys\n        };\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for(const key in ctx.data){\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys){\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: {\n                    status: \"valid\",\n                    value: key\n                },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys){\n                    pairs.push({\n                        key: {\n                            status: \"valid\",\n                            value: key\n                        },\n                        value: {\n                            status: \"valid\",\n                            value: ctx.data[key]\n                        }\n                    });\n                }\n            } else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys\n                    });\n                    status.dirty();\n                }\n            } else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        } else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys){\n                const value = ctx.data[key];\n                pairs.push({\n                    key: {\n                        status: \"valid\",\n                        value: key\n                    },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve().then(async ()=>{\n                const syncPairs = [];\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet\n                    });\n                }\n                return syncPairs;\n            }).then((syncPairs)=>{\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...message !== undefined ? {\n                errorMap: (issue, ctx)=>{\n                    var _a, _b, _c, _d;\n                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                    if (issue.code === \"unrecognized_keys\") return {\n                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n                    };\n                    return {\n                        message: defaultError\n                    };\n                }\n            } : {}\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\"\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\"\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...augmentation\n                })\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */ merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: ()=>({\n                    ...this._def.shape(),\n                    ...merging._def.shape()\n                }),\n            typeName: ZodFirstPartyTypeKind.ZodObject\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({\n            [key]: schema\n        });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key)=>{\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>shape\n        });\n    }\n    /**\n     * @deprecated\n     */ deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            } else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key)=>{\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            } else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while(newField instanceof ZodOptional){\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: ()=>newShape\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.strictCreate = (shape, params)=>{\n    return new ZodObject({\n        shape: ()=>shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nZodObject.lazycreate = (shape, params)=>{\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params)\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results){\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results){\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option)=>{\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx\n                    }),\n                    ctx: childCtx\n                };\n            })).then(handleResults);\n        } else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options){\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: []\n                    },\n                    parent: null\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                } else if (result.status === \"dirty\" && !dirty) {\n                    dirty = {\n                        result,\n                        ctx: childCtx\n                    };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues)=>new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params)=>{\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params)\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type)=>{\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    } else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    } else if (type instanceof ZodLiteral) {\n        return [\n            type.value\n        ];\n    } else if (type instanceof ZodEnum) {\n        return type.options;\n    } else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    } else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    } else if (type instanceof ZodUndefined) {\n        return [\n            undefined\n        ];\n    } else if (type instanceof ZodNull) {\n        return [\n            null\n        ];\n    } else if (type instanceof ZodOptional) {\n        return [\n            undefined,\n            ...getDiscriminator(type.unwrap())\n        ];\n    } else if (type instanceof ZodNullable) {\n        return [\n            null,\n            ...getDiscriminator(type.unwrap())\n        ];\n    } else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    } else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    } else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    } else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [\n                    discriminator\n                ]\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        } else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */ static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options){\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues){\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params)\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);\n        const newObj = {\n            ...a,\n            ...b\n        };\n        for (const key of sharedKeys){\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return {\n            valid: true,\n            data: newObj\n        };\n    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return {\n                valid: false\n            };\n        }\n        const newArray = [];\n        for(let index = 0; index < a.length; index++){\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return {\n                    valid: false\n                };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return {\n            valid: true,\n            data: newArray\n        };\n    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return {\n            valid: true,\n            data: a\n        };\n    } else {\n        return {\n            valid: false\n        };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight)=>{\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return {\n                status: status.value,\n                value: merged.data\n            };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                })\n            ]).then(([left, right])=>handleParsed(left, right));\n        } else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params)=>{\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params)\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\"\n            });\n            status.dirty();\n        }\n        const items = [\n            ...ctx.data\n        ].map((item, itemIndex)=>{\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema) return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        }).filter((x)=>!!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results)=>{\n                return ParseStatus.mergeArray(status, results);\n            });\n        } else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest\n        });\n    }\n}\nZodTuple.create = (schemas, params)=>{\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params)\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for(const key in ctx.data){\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        } else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third)\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second)\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [\n            ...ctx.data.entries()\n        ].map(([key, value], index)=>{\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [\n                    index,\n                    \"key\"\n                ])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [\n                    index,\n                    \"value\"\n                ]))\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async ()=>{\n                for (const pair of pairs){\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return {\n                    status: status.value,\n                    value: finalMap\n                };\n            });\n        } else {\n            const finalMap = new Map();\n            for (const pair of pairs){\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return {\n                status: status.value,\n                value: finalMap\n            };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params)=>{\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params)\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements){\n                if (element.status === \"aborted\") return INVALID;\n                if (element.status === \"dirty\") status.dirty();\n                parsedSet.add(element.value);\n            }\n            return {\n                status: status.value,\n                value: parsedSet\n            };\n        }\n        const elements = [\n            ...ctx.data.values()\n        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements)=>finalizeSet(elements));\n        } else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: {\n                value: minSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: {\n                value: maxSize,\n                message: errorUtil.toString(message)\n            }\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params)=>{\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params)\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor(){\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error\n                }\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap\n                ].filter((x)=>!!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error\n                }\n            });\n        }\n        const params = {\n            errorMap: ctx.common.contextualErrorMap\n        };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function(...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e)=>{\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e)=>{\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        } else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function(...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([\n                        makeArgsIssue(args, parsedArgs.error)\n                    ]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([\n                        makeReturnsIssue(result, parsedReturns.error)\n                    ]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create())\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params)\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({\n            data: ctx.data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n}\nZodLazy.create = (getter, params)=>{\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params)\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params)=>{\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params)\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params)\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor(){\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values){\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt)=>!values.includes(opt)), {\n            ...this._def,\n            ...newDef\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor(){\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params)=>{\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params)\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data)=>{\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params)=>{\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params)\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg)=>{\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                } else {\n                    status.dirty();\n                }\n            },\n            get path () {\n                return ctx.path;\n            }\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed)=>{\n                    if (status.value === \"aborted\") return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                    if (result.status === \"aborted\") return INVALID;\n                    if (result.status === \"dirty\") return DIRTY(result.value);\n                    if (status.value === \"dirty\") return DIRTY(result.value);\n                    return result;\n                });\n            } else {\n                if (status.value === \"aborted\") return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (result.status === \"aborted\") return INVALID;\n                if (result.status === \"dirty\") return DIRTY(result.value);\n                if (status.value === \"dirty\") return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc)=>{\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inner.status === \"aborted\") return INVALID;\n                if (inner.status === \"dirty\") status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return {\n                    status: status.value,\n                    value: inner.value\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((inner)=>{\n                    if (inner.status === \"aborted\") return INVALID;\n                    if (inner.status === \"dirty\") status.dirty();\n                    return executeRefinement(inner.value).then(()=>{\n                        return {\n                            status: status.value,\n                            value: inner.value\n                        };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (!isValid(base)) return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return {\n                    status: status.value,\n                    value: result\n                };\n            } else {\n                return this._def.schema._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                }).then((base)=>{\n                    if (!isValid(base)) return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({\n                            status: status.value,\n                            value: result\n                        }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params)=>{\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params)\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params)=>{\n    return new ZodEffects({\n        schema,\n        effect: {\n            type: \"preprocess\",\n            transform: preprocess\n        },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params)\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params)=>{\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params)=>{\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params)\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params)=>{\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : ()=>params.default,\n        ...processCreateParams(params)\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: []\n            }\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx\n            }\n        });\n        if (isAsync(result)) {\n            return result.then((result)=>{\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                        get error () {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data\n                    })\n                };\n            });\n        } else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\" ? result.value : this._def.catchValue({\n                    get error () {\n                        return new ZodError(newCtx.common.issues);\n                    },\n                    input: newCtx.data\n                })\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params)=>{\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : ()=>params.catch,\n        ...processCreateParams(params)\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType\n            });\n            return INVALID;\n        }\n        return {\n            status: \"valid\",\n            value: input.data\n        };\n    }\n}\nZodNaN.create = (params)=>{\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params)\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async ()=>{\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx\n                });\n                if (inResult.status === \"aborted\") return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                } else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx\n                    });\n                }\n            };\n            return handleAsync();\n        } else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx\n            });\n            if (inResult.status === \"aborted\") return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value\n                };\n            } else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data)=>{\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data)=>freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params)=>{\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params)\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? {\n        message: params\n    } : params;\n    const p2 = typeof p === \"string\" ? {\n        message: p\n    } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, /**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */ fatal) {\n    if (check) return ZodAny.create().superRefine((data, ctx)=>{\n        var _a, _b;\n        const r = check(data);\n        if (r instanceof Promise) {\n            return r.then((r)=>{\n                var _a, _b;\n                if (!r) {\n                    const params = cleanParams(_params, data);\n                    const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                    ctx.addIssue({\n                        code: \"custom\",\n                        ...params,\n                        fatal: _fatal\n                    });\n                }\n            });\n        }\n        if (!r) {\n            const params = cleanParams(_params, data);\n            const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n            ctx.addIssue({\n                code: \"custom\",\n                ...params,\n                fatal: _fatal\n            });\n        }\n        return;\n    });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`\n})=>custom((data)=>data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = ()=>stringType().optional();\nconst onumber = ()=>numberType().optional();\nconst oboolean = ()=>booleanType().optional();\nconst coerce = {\n    string: (arg)=>ZodString.create({\n            ...arg,\n            coerce: true\n        }),\n    number: (arg)=>ZodNumber.create({\n            ...arg,\n            coerce: true\n        }),\n    boolean: (arg)=>ZodBoolean.create({\n            ...arg,\n            coerce: true\n        }),\n    bigint: (arg)=>ZodBigInt.create({\n            ...arg,\n            coerce: true\n        }),\n    date: (arg)=>ZodDate.create({\n            ...arg,\n            coerce: true\n        })\n};\nconst NEVER = INVALID;\nvar z = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () {\n        return util;\n    },\n    get objectUtil () {\n        return objectUtil;\n    },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () {\n        return ZodFirstPartyTypeKind;\n    },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    \"enum\": enumType,\n    \"function\": functionType,\n    \"instanceof\": instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    \"null\": nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    \"undefined\": undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    \"void\": voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvem9kL2xpYi9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBO0FBQ0gsVUFBVUEsSUFBSTtJQUNYQSxLQUFLQyxXQUFXLEdBQUcsQ0FBQ0MsTUFBUUE7SUFDNUIsU0FBU0MsU0FBU0MsSUFBSSxHQUFJO0lBQzFCSixLQUFLRyxRQUFRLEdBQUdBO0lBQ2hCLFNBQVNFLFlBQVlDLEVBQUU7UUFDbkIsTUFBTSxJQUFJQztJQUNkO0lBQ0FQLEtBQUtLLFdBQVcsR0FBR0E7SUFDbkJMLEtBQUtRLFdBQVcsR0FBRyxDQUFDQztRQUNoQixNQUFNQyxNQUFNLENBQUM7UUFDYixLQUFLLE1BQU1DLFFBQVFGLE1BQU87WUFDdEJDLEdBQUcsQ0FBQ0MsS0FBSyxHQUFHQTtRQUNoQjtRQUNBLE9BQU9EO0lBQ1g7SUFDQVYsS0FBS1ksa0JBQWtCLEdBQUcsQ0FBQ0Y7UUFDdkIsTUFBTUcsWUFBWWIsS0FBS2MsVUFBVSxDQUFDSixLQUFLSyxNQUFNLENBQUMsQ0FBQ0MsSUFBTSxPQUFPTixHQUFHLENBQUNBLEdBQUcsQ0FBQ00sRUFBRSxDQUFDLEtBQUs7UUFDNUUsTUFBTUMsV0FBVyxDQUFDO1FBQ2xCLEtBQUssTUFBTUQsS0FBS0gsVUFBVztZQUN2QkksUUFBUSxDQUFDRCxFQUFFLEdBQUdOLEdBQUcsQ0FBQ00sRUFBRTtRQUN4QjtRQUNBLE9BQU9oQixLQUFLa0IsWUFBWSxDQUFDRDtJQUM3QjtJQUNBakIsS0FBS2tCLFlBQVksR0FBRyxDQUFDUjtRQUNqQixPQUFPVixLQUFLYyxVQUFVLENBQUNKLEtBQUtTLEdBQUcsQ0FBQyxTQUFVQyxDQUFDO1lBQ3ZDLE9BQU9WLEdBQUcsQ0FBQ1UsRUFBRTtRQUNqQjtJQUNKO0lBQ0FwQixL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UCxRQUFRSDtJQUNSdFYsVUFBVTZXO0lBQ1YzakIsUUFBUTZoQjtJQUNSL2pCLFFBQVE0a0I7SUFDUnNCLFVBQVVBO0lBQ1ZELFNBQVNBO0lBQ1RsWCxVQUFVNlc7SUFDVkksU0FBU0E7SUFDVGUsVUFBVWhCO0lBQ1ZyRCxZQUFZb0Q7SUFDWmxqQixTQUFTOGlCO0lBQ1RzQixRQUFROUI7SUFDUm5pQixLQUFLcWlCO0lBQ0w2QixjQUFjcEM7SUFDZDlpQixRQUFRK2hCO0lBQ1J4aEIsUUFBUThoQjtJQUNSOEMsYUFBYXZCO0lBQ2J3QixPQUFPbEM7SUFDUCxhQUFhWjtJQUNiK0MsT0FBT3RDO0lBQ1A1aEIsU0FBU3NoQjtJQUNULFFBQVFFO0lBQ1J5QixPQUFPQTtJQUNQaGpCLGNBQWNBO0lBQ2RDLGVBQWVBO0lBQ2ZLLFVBQVVBO0FBQ2Q7QUFFNHJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va29uZHVjdHY1Ly4vbm9kZV9tb2R1bGVzL3pvZC9saWIvaW5kZXgubWpzPzc3ZDgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHV0aWw7XG4oZnVuY3Rpb24gKHV0aWwpIHtcbiAgICB1dGlsLmFzc2VydEVxdWFsID0gKHZhbCkgPT4gdmFsO1xuICAgIGZ1bmN0aW9uIGFzc2VydElzKF9hcmcpIHsgfVxuICAgIHV0aWwuYXNzZXJ0SXMgPSBhc3NlcnRJcztcbiAgICBmdW5jdGlvbiBhc3NlcnROZXZlcihfeCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gICAgdXRpbC5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuICAgIHV0aWwuYXJyYXlUb0VudW0gPSAoaXRlbXMpID0+IHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgdXRpbC5nZXRWYWxpZEVudW1WYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbGlkS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIHZhbGlkS2V5cykge1xuICAgICAgICAgICAgZmlsdGVyZWRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKGZpbHRlcmVkKTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0VmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW2VdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHV0aWwub2JqZWN0S2V5cyA9IHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gXCJmdW5jdGlvblwiIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA/IChvYmopID0+IE9iamVjdC5rZXlzKG9iaikgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgIH07XG4gICAgdXRpbC5maW5kID0gKGFyciwgY2hlY2tlcikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2tlcihpdGVtKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgdXRpbC5pc0ludGVnZXIgPSB0eXBlb2YgTnVtYmVyLmlzSW50ZWdlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKHZhbCkgPT4gTnVtYmVyLmlzSW50ZWdlcih2YWwpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsKSAmJiBNYXRoLmZsb29yKHZhbCkgPT09IHZhbDtcbiAgICBmdW5jdGlvbiBqb2luVmFsdWVzKGFycmF5LCBzZXBhcmF0b3IgPSBcIiB8IFwiKSB7XG4gICAgICAgIHJldHVybiBhcnJheVxuICAgICAgICAgICAgLm1hcCgodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IGAnJHt2YWx9J2AgOiB2YWwpKVxuICAgICAgICAgICAgLmpvaW4oc2VwYXJhdG9yKTtcbiAgICB9XG4gICAgdXRpbC5qb2luVmFsdWVzID0gam9pblZhbHVlcztcbiAgICB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciA9IChfLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbn0pKHV0aWwgfHwgKHV0aWwgPSB7fSkpO1xudmFyIG9iamVjdFV0aWw7XG4oZnVuY3Rpb24gKG9iamVjdFV0aWwpIHtcbiAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmZpcnN0LFxuICAgICAgICAgICAgLi4uc2Vjb25kLCAvLyBzZWNvbmQgb3ZlcndyaXRlcyBmaXJzdFxuICAgICAgICB9O1xuICAgIH07XG59KShvYmplY3RVdGlsIHx8IChvYmplY3RVdGlsID0ge30pKTtcbmNvbnN0IFpvZFBhcnNlZFR5cGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcbiAgICBcInN0cmluZ1wiLFxuICAgIFwibmFuXCIsXG4gICAgXCJudW1iZXJcIixcbiAgICBcImludGVnZXJcIixcbiAgICBcImZsb2F0XCIsXG4gICAgXCJib29sZWFuXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJiaWdpbnRcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwiZnVuY3Rpb25cIixcbiAgICBcInVuZGVmaW5lZFwiLFxuICAgIFwibnVsbFwiLFxuICAgIFwiYXJyYXlcIixcbiAgICBcIm9iamVjdFwiLFxuICAgIFwidW5rbm93blwiLFxuICAgIFwicHJvbWlzZVwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwibmV2ZXJcIixcbiAgICBcIm1hcFwiLFxuICAgIFwic2V0XCIsXG5dKTtcbmNvbnN0IGdldFBhcnNlZFR5cGUgPSAoZGF0YSkgPT4ge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkO1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zdHJpbmc7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBpc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUubmFuIDogWm9kUGFyc2VkVHlwZS5udW1iZXI7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5ib29sZWFuO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uO1xuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5iaWdpbnQ7XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN5bWJvbDtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5hcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnRoZW4gJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGF0YS50aGVuID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAgICAgICBkYXRhLmNhdGNoICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5vYmplY3Q7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmtub3duO1xuICAgIH1cbn07XG5cbmNvbnN0IFpvZElzc3VlQ29kZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwiaW52YWxpZF90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW52YWxpZF91bmlvblwiLFxuICAgIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gICAgXCJpbnZhbGlkX2VudW1fdmFsdWVcIixcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gICAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICAgIFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiLFxuICAgIFwiaW52YWxpZF9kYXRlXCIsXG4gICAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICAgIFwidG9vX3NtYWxsXCIsXG4gICAgXCJ0b29fYmlnXCIsXG4gICAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICAgIFwibm90X211bHRpcGxlX29mXCIsXG4gICAgXCJub3RfZmluaXRlXCIsXG5dKTtcbmNvbnN0IHF1b3RlbGVzc0pzb24gPSAob2JqKSA9PiB7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMik7XG4gICAgcmV0dXJuIGpzb24ucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbn07XG5jbGFzcyBab2RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBnZXQgZXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc3N1ZXM7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGlzc3Vlcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlzc3VlcyA9IFtdO1xuICAgICAgICB0aGlzLmFkZElzc3VlID0gKHN1YikgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIHN1Yl07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIC4uLnN1YnNdO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhY3R1YWxQcm90byA9IG5ldy50YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYmFuL2JhblxuICAgICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIGFjdHVhbFByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX19wcm90b19fID0gYWN0dWFsUHJvdG87XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lID0gXCJab2RFcnJvclwiO1xuICAgICAgICB0aGlzLmlzc3VlcyA9IGlzc3VlcztcbiAgICB9XG4gICAgZm9ybWF0KF9tYXBwZXIpIHtcbiAgICAgICAgY29uc3QgbWFwcGVyID0gX21hcHBlciB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGlzc3VlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzc3VlLm1lc3NhZ2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjb25zdCBmaWVsZEVycm9ycyA9IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgY29uc3QgcHJvY2Vzc0Vycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlzc3VlIG9mIGVycm9yLmlzc3Vlcykge1xuICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfdW5pb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpc3N1ZS51bmlvbkVycm9ycy5tYXAocHJvY2Vzc0Vycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3JldHVybl90eXBlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLnJldHVyblR5cGVFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9hcmd1bWVudHNcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUuYXJndW1lbnRzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZEVycm9ycy5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGZpZWxkRXJyb3JzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpIDwgaXNzdWUucGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gaXNzdWUucGF0aFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlcm1pbmFsID0gaSA9PT0gaXNzdWUucGF0aC5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXJtaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmICh0eXBlb2YgZWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAodHlwZW9mIGVsID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjb25zdCBlcnJvckFycmF5OiBhbnkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGVycm9yQXJyYXkuX2Vycm9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCBlcnJvckFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgeyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJbZWxdLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIgPSBjdXJyW2VsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcHJvY2Vzc0Vycm9yKHRoaXMpO1xuICAgICAgICByZXR1cm4gZmllbGRFcnJvcnM7XG4gICAgfVxuICAgIHN0YXRpYyBhc3NlcnQodmFsdWUpIHtcbiAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBab2RFcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IGEgWm9kRXJyb3I6ICR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gICAgfVxuICAgIGdldCBtZXNzYWdlKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5pc3N1ZXMsIHV0aWwuanNvblN0cmluZ2lmeVJlcGxhY2VyLCAyKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3Vlcy5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIGZsYXR0ZW4obWFwcGVyID0gKGlzc3VlKSA9PiBpc3N1ZS5tZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0ge307XG4gICAgICAgIGNvbnN0IGZvcm1FcnJvcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy5pc3N1ZXMpIHtcbiAgICAgICAgICAgIGlmIChzdWIucGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dID0gZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dIHx8IFtdO1xuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXS5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1FcnJvcnMucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZm9ybUVycm9ycywgZmllbGRFcnJvcnMgfTtcbiAgICB9XG4gICAgZ2V0IGZvcm1FcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsYXR0ZW4oKTtcbiAgICB9XG59XG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoaXNzdWVzKTtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuXG5jb25zdCBlcnJvck1hcCA9IChpc3N1ZSwgX2N0eCkgPT4ge1xuICAgIGxldCBtZXNzYWdlO1xuICAgIHN3aXRjaCAoaXNzdWUuY29kZSkge1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGU6XG4gICAgICAgICAgICBpZiAoaXNzdWUucmVjZWl2ZWQgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiUmVxdWlyZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXhwZWN0ZWQgJHtpc3N1ZS5leHBlY3RlZH0sIHJlY2VpdmVkICR7aXNzdWUucmVjZWl2ZWR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWw6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgbGl0ZXJhbCB2YWx1ZSwgZXhwZWN0ZWQgJHtKU09OLnN0cmluZ2lmeShpc3N1ZS5leHBlY3RlZCwgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUudW5yZWNvZ25pemVkX2tleXM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYFVucmVjb2duaXplZCBrZXkocykgaW4gb2JqZWN0OiAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5rZXlzLCBcIiwgXCIpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbjpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGRpc2NyaW1pbmF0b3IgdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGVudW0gdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfSwgcmVjZWl2ZWQgJyR7aXNzdWUucmVjZWl2ZWR9J2A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9hcmd1bWVudHM6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZnVuY3Rpb24gYXJndW1lbnRzYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3JldHVybl90eXBlOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIHJldHVybiB0eXBlYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2RhdGU6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZGF0ZWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmc6XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJpbmNsdWRlc1wiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IGluY2x1ZGUgXCIke2lzc3VlLnZhbGlkYXRpb24uaW5jbHVkZXN9XCJgO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24ucG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBhdCBvbmUgb3IgbW9yZSBwb3NpdGlvbnMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7aXNzdWUudmFsaWRhdGlvbi5wb3NpdGlvbn1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic3RhcnRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IHN0YXJ0IHdpdGggXCIke2lzc3VlLnZhbGlkYXRpb24uc3RhcnRzV2l0aH1cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwiZW5kc1dpdGhcIiBpbiBpc3N1ZS52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dDogbXVzdCBlbmQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5lbmRzV2l0aH1cImA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGlzc3VlLnZhbGlkYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnZhbGlkYXRpb24gIT09IFwicmVnZXhcIikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCAke2lzc3VlLnZhbGlkYXRpb259YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fc21hbGw6XG4gICAgICAgICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBcImV4YWN0bHlcIiA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSAke2lzc3VlLmV4YWN0XG4gICAgICAgICAgICAgICAgICAgID8gYGV4YWN0bHkgZXF1YWwgdG8gYFxuICAgICAgICAgICAgICAgICAgICA6IGlzc3VlLmluY2x1c2l2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYGdyZWF0ZXIgdGhhbiBgfSR7aXNzdWUubWluaW11bX1gO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJkYXRlXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBEYXRlIG11c3QgYmUgJHtpc3N1ZS5leGFjdFxuICAgICAgICAgICAgICAgICAgICA/IGBleGFjdGx5IGVxdWFsIHRvIGBcbiAgICAgICAgICAgICAgICAgICAgOiBpc3N1ZS5pbmNsdXNpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGBncmVhdGVyIHRoYW4gYH0ke25ldyBEYXRlKE51bWJlcihpc3N1ZS5taW5pbXVtKSl9YDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUudG9vX2JpZzpcbiAgICAgICAgICAgIGlmIChpc3N1ZS50eXBlID09PSBcImFycmF5XCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBBcnJheSBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5leGFjdCA/IGBleGFjdGx5YCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBtb3N0YCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19IGVsZW1lbnQocylgO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYFN0cmluZyBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5leGFjdCA/IGBleGFjdGx5YCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBhdCBtb3N0YCA6IGB1bmRlcmB9ICR7aXNzdWUubWF4aW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSAke2lzc3VlLmV4YWN0XG4gICAgICAgICAgICAgICAgICAgID8gYGV4YWN0bHlgXG4gICAgICAgICAgICAgICAgICAgIDogaXNzdWUuaW5jbHVzaXZlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGBsZXNzIHRoYW4gb3IgZXF1YWwgdG9gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiYmlnaW50XCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBCaWdJbnQgbXVzdCBiZSAke2lzc3VlLmV4YWN0XG4gICAgICAgICAgICAgICAgICAgID8gYGV4YWN0bHlgXG4gICAgICAgICAgICAgICAgICAgIDogaXNzdWUuaW5jbHVzaXZlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGBsZXNzIHRoYW4gb3IgZXF1YWwgdG9gXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRGF0ZSBtdXN0IGJlICR7aXNzdWUuZXhhY3RcbiAgICAgICAgICAgICAgICAgICAgPyBgZXhhY3RseWBcbiAgICAgICAgICAgICAgICAgICAgOiBpc3N1ZS5pbmNsdXNpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYHNtYWxsZXIgdGhhbiBvciBlcXVhbCB0b2BcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYHNtYWxsZXIgdGhhbmB9ICR7bmV3IERhdGUoTnVtYmVyKGlzc3VlLm1heGltdW0pKX1gO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5jdXN0b206XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXRgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnRlcnNlY3Rpb24gcmVzdWx0cyBjb3VsZCBub3QgYmUgbWVyZ2VkYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2Y6XG4gICAgICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJHtpc3N1ZS5tdWx0aXBsZU9mfWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUubm90X2Zpbml0ZTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcIk51bWJlciBtdXN0IGJlIGZpbml0ZVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gX2N0eC5kZWZhdWx0RXJyb3I7XG4gICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGlzc3VlKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xufTtcblxubGV0IG92ZXJyaWRlRXJyb3JNYXAgPSBlcnJvck1hcDtcbmZ1bmN0aW9uIHNldEVycm9yTWFwKG1hcCkge1xuICAgIG92ZXJyaWRlRXJyb3JNYXAgPSBtYXA7XG59XG5mdW5jdGlvbiBnZXRFcnJvck1hcCgpIHtcbiAgICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDtcbn1cblxuY29uc3QgbWFrZUlzc3VlID0gKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSwgcGF0aCwgZXJyb3JNYXBzLCBpc3N1ZURhdGEgfSA9IHBhcmFtcztcbiAgICBjb25zdCBmdWxsUGF0aCA9IFsuLi5wYXRoLCAuLi4oaXNzdWVEYXRhLnBhdGggfHwgW10pXTtcbiAgICBjb25zdCBmdWxsSXNzdWUgPSB7XG4gICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgfTtcbiAgICBpZiAoaXNzdWVEYXRhLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXNzdWVEYXRhLFxuICAgICAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgICAgICBtZXNzYWdlOiBpc3N1ZURhdGEubWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgY29uc3QgbWFwcyA9IGVycm9yTWFwc1xuICAgICAgICAuZmlsdGVyKChtKSA9PiAhIW0pXG4gICAgICAgIC5zbGljZSgpXG4gICAgICAgIC5yZXZlcnNlKCk7XG4gICAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBtYXAoZnVsbElzc3VlLCB7IGRhdGEsIGRlZmF1bHRFcnJvcjogZXJyb3JNZXNzYWdlIH0pLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICB9O1xufTtcbmNvbnN0IEVNUFRZX1BBVEggPSBbXTtcbmZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVNYXAgPSBnZXRFcnJvck1hcCgpO1xuICAgIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICAgICAgaXNzdWVEYXRhOiBpc3N1ZURhdGEsXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgLy8gY29udGV4dHVhbCBlcnJvciBtYXAgaXMgZmlyc3QgcHJpb3JpdHlcbiAgICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCwgLy8gdGhlbiBzY2hlbWEtYm91bmQgbWFwIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAgPT09IGVycm9yTWFwID8gdW5kZWZpbmVkIDogZXJyb3JNYXAsIC8vIHRoZW4gZ2xvYmFsIGRlZmF1bHQgbWFwXG4gICAgICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgIH0pO1xuICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goaXNzdWUpO1xufVxuY2xhc3MgUGFyc2VTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJ2YWxpZFwiO1xuICAgIH1cbiAgICBkaXJ0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gICAgfVxuICAgIGFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJhYm9ydGVkXCI7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBmaW5hbE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcGFpcjtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmIChrZXkudmFsdWUgIT09IFwiX19wcm90b19fXCIgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSkge1xuICAgICAgICAgICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0IH07XG4gICAgfVxufVxuY29uc3QgSU5WQUxJRCA9IE9iamVjdC5mcmVlemUoe1xuICAgIHN0YXR1czogXCJhYm9ydGVkXCIsXG59KTtcbmNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG5jb25zdCBPSyA9ICh2YWx1ZSkgPT4gKHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlIH0pO1xuY29uc3QgaXNBYm9ydGVkID0gKHgpID0+IHguc3RhdHVzID09PSBcImFib3J0ZWRcIjtcbmNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbmNvbnN0IGlzVmFsaWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwidmFsaWRcIjtcbmNvbnN0IGlzQXN5bmMgPSAoeCkgPT4gdHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgeCBpbnN0YW5jZW9mIFByb21pc2U7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbnR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xyXG4gICAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XHJcbiAgICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xyXG59O1xuXG52YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2UgPT09IG51bGwgfHwgbWVzc2FnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVzc2FnZS5tZXNzYWdlO1xufSkoZXJyb3JVdGlsIHx8IChlcnJvclV0aWwgPSB7fSkpO1xuXG52YXIgX1pvZEVudW1fY2FjaGUsIF9ab2ROYXRpdmVFbnVtX2NhY2hlO1xuY2xhc3MgUGFyc2VJbnB1dExhenlQYXRoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHZhbHVlLCBwYXRoLCBrZXkpIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkUGF0aCA9IFtdO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5kYXRhID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3BhdGggPSBwYXRoO1xuICAgICAgICB0aGlzLl9rZXkgPSBrZXk7XG4gICAgfVxuICAgIGdldCBwYXRoKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlZFBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fa2V5IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRQYXRoLnB1c2goLi4udGhpcy5fcGF0aCwgLi4udGhpcy5fa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCB0aGlzLl9rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRQYXRoO1xuICAgIH1cbn1cbmNvbnN0IGhhbmRsZVJlc3VsdCA9IChjdHgsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzdWx0LnZhbHVlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWRhdGlvbiBmYWlsZWQgYnV0IG5vIGlzc3VlcyBkZXRlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSB7XG4gICAgaWYgKCFwYXJhbXMpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICBjb25zdCB7IGVycm9yTWFwLCBpbnZhbGlkX3R5cGVfZXJyb3IsIHJlcXVpcmVkX2Vycm9yLCBkZXNjcmlwdGlvbiB9ID0gcGFyYW1zO1xuICAgIGlmIChlcnJvck1hcCAmJiAoaW52YWxpZF90eXBlX2Vycm9yIHx8IHJlcXVpcmVkX2Vycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBcImludmFsaWRfdHlwZV9lcnJvclwiIG9yIFwicmVxdWlyZWRfZXJyb3JcIiBpbiBjb25qdW5jdGlvbiB3aXRoIGN1c3RvbSBlcnJvciBtYXAuYCk7XG4gICAgfVxuICAgIGlmIChlcnJvck1hcClcbiAgICAgICAgcmV0dXJuIHsgZXJyb3JNYXA6IGVycm9yTWFwLCBkZXNjcmlwdGlvbiB9O1xuICAgIGNvbnN0IGN1c3RvbU1hcCA9IChpc3MsIGN0eCkgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IHBhcmFtcztcbiAgICAgICAgaWYgKGlzcy5jb2RlID09PSBcImludmFsaWRfZW51bV92YWx1ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBtZXNzYWdlICE9PSBudWxsICYmIG1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lc3NhZ2UgOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjdHguZGF0YSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogKF9hID0gbWVzc2FnZSAhPT0gbnVsbCAmJiBtZXNzYWdlICE9PSB2b2lkIDAgPyBtZXNzYWdlIDogcmVxdWlyZWRfZXJyb3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yIH07XG4gICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IChfYiA9IG1lc3NhZ2UgIT09IG51bGwgJiYgbWVzc2FnZSAhPT0gdm9pZCAwID8gbWVzc2FnZSA6IGludmFsaWRfdHlwZV9lcnJvcikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZXJyb3JNYXA6IGN1c3RvbU1hcCwgZGVzY3JpcHRpb24gfTtcbn1cbmNsYXNzIFpvZFR5cGUge1xuICAgIGdldCBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgX2dldFR5cGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSk7XG4gICAgfVxuICAgIF9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KSB7XG4gICAgICAgIHJldHVybiAoY3R4IHx8IHtcbiAgICAgICAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgICAgICAgIGRhdGE6IGlucHV0LmRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGlucHV0LmRhdGEpLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhdGg6IGlucHV0LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGlucHV0LnBhcmVudCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogbmV3IFBhcnNlU3RhdHVzKCksXG4gICAgICAgICAgICBjdHg6IHtcbiAgICAgICAgICAgICAgICBjb21tb246IGlucHV0LnBhcmVudC5jb21tb24sXG4gICAgICAgICAgICAgICAgZGF0YTogaW5wdXQuZGF0YSxcbiAgICAgICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGlucHV0LmRhdGEpLFxuICAgICAgICAgICAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICAgICAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGlucHV0LnBhcmVudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9wYXJzZVN5bmMoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAoaXNBc3luYyhyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW5jaHJvbm91cyBwYXJzZSBlbmNvdW50ZXJlZCBwcm9taXNlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfcGFyc2VBc3luYyhpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICB9XG4gICAgcGFyc2UoZGF0YSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2FmZVBhcnNlKGRhdGEsIHBhcmFtcyk7XG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgIH1cbiAgICBzYWZlUGFyc2UoZGF0YSwgcGFyYW1zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogKF9hID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmFzeW5jKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5lcnJvck1hcCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoOiAocGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLnBhdGgpIHx8IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICBcIn52YWxpZGF0ZVwiKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgY3R4ID0ge1xuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICBhc3luYzogISF0aGlzW1wifnN0YW5kYXJkXCJdLmFzeW5jLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdGg6IFtdLFxuICAgICAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGRhdGEpLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2VTeW5jKHsgZGF0YSwgcGF0aDogW10sIHBhcmVudDogY3R4IH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkKHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBjdHguY29tbW9uLmlzc3VlcyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoKF9iID0gKF9hID0gZXJyID09PSBudWxsIHx8IGVyciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyLm1lc3NhZ2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0xvd2VyQ2FzZSgpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoXCJlbmNvdW50ZXJlZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW1wifnN0YW5kYXJkXCJdLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3R4LmNvbW1vbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VBc3luYyh7IGRhdGEsIHBhdGg6IFtdLCBwYXJlbnQ6IGN0eCB9KS50aGVuKChyZXN1bHQpID0+IGlzVmFsaWQocmVzdWx0KVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgIGlzc3VlczogY3R4LmNvbW1vbi5pc3N1ZXMsXG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpO1xuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICB9XG4gICAgYXN5bmMgc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgY29udGV4dHVhbEVycm9yTWFwOiBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuZXJyb3JNYXAsXG4gICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogKHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5wYXRoKSB8fCBbXSxcbiAgICAgICAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShkYXRhKSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbWF5YmVBc3luY1Jlc3VsdCA9IHRoaXMuX3BhcnNlKHsgZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoaXNBc3luYyhtYXliZUFzeW5jUmVzdWx0KVxuICAgICAgICAgICAgPyBtYXliZUFzeW5jUmVzdWx0XG4gICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZShtYXliZUFzeW5jUmVzdWx0KSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICAgIH1cbiAgICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZ2V0SXNzdWVQcm9wZXJ0aWVzID0gKHZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBtZXNzYWdlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWVzc2FnZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmluZW1lbnQoKHZhbCwgY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBjaGVjayh2YWwpO1xuICAgICAgICAgICAgY29uc3Qgc2V0RXJyb3IgPSAoKSA9PiBjdHguYWRkSXNzdWUoe1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5jdXN0b20sXG4gICAgICAgICAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHNldEVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWZpbmVtZW50KGNoZWNrLCByZWZpbmVtZW50RGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmICghY2hlY2sodmFsKSkge1xuICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh0eXBlb2YgcmVmaW5lbWVudERhdGEgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICA/IHJlZmluZW1lbnREYXRhKHZhbCwgY3R4KVxuICAgICAgICAgICAgICAgICAgICA6IHJlZmluZW1lbnREYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9yZWZpbmVtZW50KHJlZmluZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInJlZmluZW1lbnRcIiwgcmVmaW5lbWVudCB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3VwZXJSZWZpbmUocmVmaW5lbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudChyZWZpbmVtZW50KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGVmKSB7XG4gICAgICAgIC8qKiBBbGlhcyBvZiBzYWZlUGFyc2VBc3luYyAqL1xuICAgICAgICB0aGlzLnNwYSA9IHRoaXMuc2FmZVBhcnNlQXN5bmM7XG4gICAgICAgIHRoaXMuX2RlZiA9IGRlZjtcbiAgICAgICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2UgPSB0aGlzLnNhZmVQYXJzZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBhcnNlQXN5bmMgPSB0aGlzLnBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zcGEgPSB0aGlzLnNwYS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlZmluZSA9IHRoaXMucmVmaW5lLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5zdXBlclJlZmluZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9wdGlvbmFsID0gdGhpcy5vcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm51bGxpc2ggPSB0aGlzLm51bGxpc2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcnJheSA9IHRoaXMuYXJyYXkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub3IgPSB0aGlzLm9yLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYW5kID0gdGhpcy5hbmQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmJyYW5kID0gdGhpcy5icmFuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSB0aGlzLmRlZmF1bHQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jYXRjaCA9IHRoaXMuY2F0Y2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXNjcmliZSA9IHRoaXMuZGVzY3JpYmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5waXBlID0gdGhpcy5waXBlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVhZG9ubHkgPSB0aGlzLnJlYWRvbmx5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNOdWxsYWJsZSA9IHRoaXMuaXNOdWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmlzT3B0aW9uYWwgPSB0aGlzLmlzT3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpc1tcIn5zdGFuZGFyZFwiXSA9IHtcbiAgICAgICAgICAgIHZlcnNpb246IDEsXG4gICAgICAgICAgICB2ZW5kb3I6IFwiem9kXCIsXG4gICAgICAgICAgICB2YWxpZGF0ZTogKGRhdGEpID0+IHRoaXNbXCJ+dmFsaWRhdGVcIl0oZGF0YSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gWm9kT3B0aW9uYWwuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gWm9kTnVsbGFibGUuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG51bGxpc2goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm51bGxhYmxlKCkub3B0aW9uYWwoKTtcbiAgICB9XG4gICAgYXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBab2RBcnJheS5jcmVhdGUodGhpcyk7XG4gICAgfVxuICAgIHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiBab2RQcm9taXNlLmNyZWF0ZSh0aGlzLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICBvcihvcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSwgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgYW5kKGluY29taW5nKSB7XG4gICAgICAgIHJldHVybiBab2RJbnRlcnNlY3Rpb24uY3JlYXRlKHRoaXMsIGluY29taW5nLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgICAgICBlZmZlY3Q6IHsgdHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWZhdWx0KGRlZikge1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnJhbmQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQnJhbmRlZCh7XG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJyYW5kZWQsXG4gICAgICAgICAgICB0eXBlOiB0aGlzLFxuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2goZGVmKSB7XG4gICAgICAgIGNvbnN0IGNhdGNoVmFsdWVGdW5jID0gdHlwZW9mIGRlZiA9PT0gXCJmdW5jdGlvblwiID8gZGVmIDogKCkgPT4gZGVmO1xuICAgICAgICByZXR1cm4gbmV3IFpvZENhdGNoKHtcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgICAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgICAgICAgIGNhdGNoVmFsdWU6IGNhdGNoVmFsdWVGdW5jLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RDYXRjaCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlc2NyaWJlKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IFRoaXMoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwaXBlKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gWm9kUGlwZWxpbmUuY3JlYXRlKHRoaXMsIHRhcmdldCk7XG4gICAgfVxuICAgIHJlYWRvbmx5KCkge1xuICAgICAgICByZXR1cm4gWm9kUmVhZG9ubHkuY3JlYXRlKHRoaXMpO1xuICAgIH1cbiAgICBpc09wdGlvbmFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UodW5kZWZpbmVkKS5zdWNjZXNzO1xuICAgIH1cbiAgICBpc051bGxhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zYWZlUGFyc2UobnVsbCkuc3VjY2VzcztcbiAgICB9XG59XG5jb25zdCBjdWlkUmVnZXggPSAvXmNbXlxccy1dezgsfSQvaTtcbmNvbnN0IGN1aWQyUmVnZXggPSAvXlswLTlhLXpdKyQvO1xuY29uc3QgdWxpZFJlZ2V4ID0gL15bMC05QS1ISktNTlAtVFYtWl17MjZ9JC9pO1xuLy8gY29uc3QgdXVpZFJlZ2V4ID1cbi8vICAgL14oW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tWzEtNV1bYS1mMC05XXszfS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTtcbmNvbnN0IHV1aWRSZWdleCA9IC9eWzAtOWEtZkEtRl17OH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17NH1cXGItWzAtOWEtZkEtRl17MTJ9JC9pO1xuY29uc3QgbmFub2lkUmVnZXggPSAvXlthLXowLTlfLV17MjF9JC9pO1xuY29uc3Qgand0UmVnZXggPSAvXltBLVphLXowLTktX10rXFwuW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dKiQvO1xuY29uc3QgZHVyYXRpb25SZWdleCA9IC9eWy0rXT9QKD8hJCkoPzooPzpbLStdP1xcZCtZKXwoPzpbLStdP1xcZCtbLixdXFxkK1kkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/Oig/OlstK10/XFxkK1cpfCg/OlstK10/XFxkK1suLF1cXGQrVyQpKT8oPzooPzpbLStdP1xcZCtEKXwoPzpbLStdP1xcZCtbLixdXFxkK0QkKSk/KD86VCg/PVtcXGQrLV0pKD86KD86Wy0rXT9cXGQrSCl8KD86Wy0rXT9cXGQrWy4sXVxcZCtIJCkpPyg/Oig/OlstK10/XFxkK00pfCg/OlstK10/XFxkK1suLF1cXGQrTSQpKT8oPzpbLStdP1xcZCsoPzpbLixdXFxkKyk/Uyk/KT8/JC87XG4vLyBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NjE4MS8xNTUwMTU1XG4vLyBvbGQgdmVyc2lvbjogdG9vIHNsb3csIGRpZG4ndCBzdXBwb3J0IHVuaWNvZGVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPSAvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkkL2k7XG4vL29sZCBlbWFpbCByZWdleFxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKChbXjw+KClbXFxdLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF0uLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoPyEtKShbXjw+KClbXFxdLiw7Olxcc0BcIl0rXFwuKStbXjw+KClbXFxdLiw7Olxcc0BcIl17MSx9KVteLTw+KClbXFxdLiw7Olxcc0BcIl0kL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXigoW148PigpW1xcXVxcXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKSopfChcXFwiLitcXFwiKSlAKChcXFsoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXF0pfChcXFtJUHY2OigoW2EtZjAtOV17MSw0fTopezd9fDo6KFthLWYwLTldezEsNH06KXswLDZ9fChbYS1mMC05XXsxLDR9Oil7MX06KFthLWYwLTldezEsNH06KXswLDV9fChbYS1mMC05XXsxLDR9Oil7Mn06KFthLWYwLTldezEsNH06KXswLDR9fChbYS1mMC05XXsxLDR9Oil7M306KFthLWYwLTldezEsNH06KXswLDN9fChbYS1mMC05XXsxLDR9Oil7NH06KFthLWYwLTldezEsNH06KXswLDJ9fChbYS1mMC05XXsxLDR9Oil7NX06KFthLWYwLTldezEsNH06KXswLDF9KShbYS1mMC05XXsxLDR9fCgoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKSlcXF0pfChbQS1aYS16MC05XShbQS1aYS16MC05LV0qW0EtWmEtejAtOV0pKihcXC5bQS1aYS16XXsyLH0pKykpJC87XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16QS1aMC05XFwuXFwhXFwjXFwkXFwlXFwmXFwnXFwqXFwrXFwvXFw9XFw/XFxeXFxfXFxgXFx7XFx8XFx9XFx+XFwtXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXig/OlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSp8XCIoPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2ZdfFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGUtXFx4N2ZdKSpcIilAKD86KD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP3xcXFsoPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldP3xbYS16MC05LV0qW2EtejAtOV06KD86W1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4NWFcXHg1My1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKylcXF0pJC9pO1xuY29uc3QgZW1haWxSZWdleCA9IC9eKD8hXFwuKSg/IS4qXFwuXFwuKShbQS1aMC05XycrXFwtXFwuXSopW0EtWjAtOV8rLV1AKFtBLVowLTldW0EtWjAtOVxcLV0qXFwuKStbQS1aXXsyLH0kL2k7XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID1cbi8vICAgL15bYS16MC05LiEjJCUm4oCZKisvPT9eX2B7fH1+LV0rQFthLXowLTktXSsoPzpcXC5bYS16MC05XFwtXSspKiQvaTtcbi8vIGZyb20gaHR0cHM6Ly90aGVrZXZpbnNjb3R0LmNvbS9lbW9qaXMtaW4tamF2YXNjcmlwdC8jd3JpdGluZy1hLXJlZ3VsYXItZXhwcmVzc2lvblxuY29uc3QgX2Vtb2ppUmVnZXggPSBgXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyRgO1xubGV0IGVtb2ppUmVnZXg7XG4vLyBmYXN0ZXIsIHNpbXBsZXIsIHNhZmVyXG5jb25zdCBpcHY0UmVnZXggPSAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvO1xuY29uc3QgaXB2NENpZHJSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwvKDNbMC0yXXxbMTJdP1swLTldKSQvO1xuLy8gY29uc3QgaXB2NlJlZ2V4ID1cbi8vIC9eKChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKSQvO1xuY29uc3QgaXB2NlJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpJC87XG5jb25zdCBpcHY2Q2lkclJlZ2V4ID0gL14oKFswLTlhLWZBLUZdezEsNH06KXs3LDd9WzAtOWEtZkEtRl17MSw0fXwoWzAtOWEtZkEtRl17MSw0fTopezEsN306fChbMC05YS1mQS1GXXsxLDR9Oil7MSw2fTpbMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw1fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwyfXwoWzAtOWEtZkEtRl17MSw0fTopezEsNH0oOlswLTlhLWZBLUZdezEsNH0pezEsM318KFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSwyfSg6WzAtOWEtZkEtRl17MSw0fSl7MSw1fXxbMC05YS1mQS1GXXsxLDR9OigoOlswLTlhLWZBLUZdezEsNH0pezEsNn0pfDooKDpbMC05YS1mQS1GXXsxLDR9KXsxLDd9fDopfGZlODA6KDpbMC05YS1mQS1GXXswLDR9KXswLDR9JVswLTlhLXpBLVpdezEsfXw6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KCgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSlcXC4pezMsM30oMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pfChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fTooKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSkpXFwvKDEyWzAtOF18MVswMV1bMC05XXxbMS05XT9bMC05XSkkLztcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzc4NjAzOTIvZGV0ZXJtaW5lLWlmLXN0cmluZy1pcy1pbi1iYXNlNjQtdXNpbmctamF2YXNjcmlwdFxuY29uc3QgYmFzZTY0UmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87XG4vLyBodHRwczovL2Jhc2U2NC5ndXJ1L3N0YW5kYXJkcy9iYXNlNjR1cmxcbmNvbnN0IGJhc2U2NHVybFJlZ2V4ID0gL14oWzAtOWEtekEtWi1fXXs0fSkqKChbMC05YS16QS1aLV9dezJ9KD09KT8pfChbMC05YS16QS1aLV9dezN9KD0pPykpPyQvO1xuLy8gc2ltcGxlXG4vLyBjb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgXFxcXGR7NH0tXFxcXGR7Mn0tXFxcXGR7Mn1gO1xuLy8gbm8gbGVhcCB5ZWFyIHZhbGlkYXRpb25cbi8vIGNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGBcXFxcZHs0fS0oKDBbMTM1NzhdfDEwfDEyKS0zMXwoMFsxMy05XXwxWzAtMl0pLTMwfCgwWzEtOV18MVswLTJdKS0oMFsxLTldfDFcXFxcZHwyXFxcXGQpKWA7XG4vLyB3aXRoIGxlYXAgeWVhciB2YWxpZGF0aW9uXG5jb25zdCBkYXRlUmVnZXhTb3VyY2UgPSBgKChcXFxcZFxcXFxkWzI0NjhdWzA0OF18XFxcXGRcXFxcZFsxMzU3OV1bMjZdfFxcXFxkXFxcXGQwWzQ4XXxbMDI0NjhdWzA0OF0wMHxbMTM1NzldWzI2XTAwKS0wMi0yOXxcXFxcZHs0fS0oKDBbMTM1NzhdfDFbMDJdKS0oMFsxLTldfFsxMl1cXFxcZHwzWzAxXSl8KDBbNDY5XXwxMSktKDBbMS05XXxbMTJdXFxcXGR8MzApfCgwMiktKDBbMS05XXwxXFxcXGR8MlswLThdKSkpYDtcbmNvbnN0IGRhdGVSZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVSZWdleFNvdXJjZX0kYCk7XG5mdW5jdGlvbiB0aW1lUmVnZXhTb3VyY2UoYXJncykge1xuICAgIGxldCBzZWNvbmRzUmVnZXhTb3VyY2UgPSBgWzAtNV1cXFxcZGA7XG4gICAgaWYgKGFyZ3MucHJlY2lzaW9uKSB7XG4gICAgICAgIHNlY29uZHNSZWdleFNvdXJjZSA9IGAke3NlY29uZHNSZWdleFNvdXJjZX1cXFxcLlxcXFxkeyR7YXJncy5wcmVjaXNpb259fWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyZ3MucHJlY2lzaW9uID09IG51bGwpIHtcbiAgICAgICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfShcXFxcLlxcXFxkKyk/YDtcbiAgICB9XG4gICAgY29uc3Qgc2Vjb25kc1F1YW50aWZpZXIgPSBhcmdzLnByZWNpc2lvbiA/IFwiK1wiIDogXCI/XCI7IC8vIHJlcXVpcmUgc2Vjb25kcyBpZiBwcmVjaXNpb24gaXMgbm9uemVyb1xuICAgIHJldHVybiBgKFswMV1cXFxcZHwyWzAtM10pOlswLTVdXFxcXGQoOiR7c2Vjb25kc1JlZ2V4U291cmNlfSkke3NlY29uZHNRdWFudGlmaWVyfWA7XG59XG5mdW5jdGlvbiB0aW1lUmVnZXgoYXJncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKGBeJHt0aW1lUmVnZXhTb3VyY2UoYXJncyl9JGApO1xufVxuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMTQzMjMxXG5mdW5jdGlvbiBkYXRldGltZVJlZ2V4KGFyZ3MpIHtcbiAgICBsZXQgcmVnZXggPSBgJHtkYXRlUmVnZXhTb3VyY2V9VCR7dGltZVJlZ2V4U291cmNlKGFyZ3MpfWA7XG4gICAgY29uc3Qgb3B0cyA9IFtdO1xuICAgIG9wdHMucHVzaChhcmdzLmxvY2FsID8gYFo/YCA6IGBaYCk7XG4gICAgaWYgKGFyZ3Mub2Zmc2V0KVxuICAgICAgICBvcHRzLnB1c2goYChbKy1dXFxcXGR7Mn06P1xcXFxkezJ9KWApO1xuICAgIHJlZ2V4ID0gYCR7cmVnZXh9KCR7b3B0cy5qb2luKFwifFwiKX0pYDtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7cmVnZXh9JGApO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwLCB2ZXJzaW9uKSB7XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY0XCIgfHwgIXZlcnNpb24pICYmIGlwdjRSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY2XCIgfHwgIXZlcnNpb24pICYmIGlwdjZSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEpXVChqd3QsIGFsZykge1xuICAgIGlmICghand0UmVnZXgudGVzdChqd3QpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2hlYWRlcl0gPSBqd3Quc3BsaXQoXCIuXCIpO1xuICAgICAgICAvLyBDb252ZXJ0IGJhc2U2NHVybCB0byBiYXNlNjRcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gaGVhZGVyXG4gICAgICAgICAgICAucmVwbGFjZSgvLS9nLCBcIitcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9fL2csIFwiL1wiKVxuICAgICAgICAgICAgLnBhZEVuZChoZWFkZXIubGVuZ3RoICsgKCg0IC0gKGhlYWRlci5sZW5ndGggJSA0KSkgJSA0KSwgXCI9XCIpO1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gSlNPTi5wYXJzZShhdG9iKGJhc2U2NCkpO1xuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQgIT09IFwib2JqZWN0XCIgfHwgZGVjb2RlZCA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFkZWNvZGVkLnR5cCB8fCAhZGVjb2RlZC5hbGcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhbGcgJiYgZGVjb2RlZC5hbGcgIT09IGFsZylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNWYWxpZENpZHIoaXAsIHZlcnNpb24pIHtcbiAgICBpZiAoKHZlcnNpb24gPT09IFwidjRcIiB8fCAhdmVyc2lvbikgJiYgaXB2NENpZHJSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY2XCIgfHwgIXZlcnNpb24pICYmIGlwdjZDaWRyUmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmNsYXNzIFpvZFN0cmluZyBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IFN0cmluZyhpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZykge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zdHJpbmcsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBpbnB1dC5kYXRhLmxlbmd0aCA+IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gaW5wdXQuZGF0YS5sZW5ndGggPCBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vQmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICAgICAgICAgIGlmICghZW1haWxSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtb2ppXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1vamlSZWdleCA9IG5ldyBSZWdFeHAoX2Vtb2ppUmVnZXgsIFwidVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFlbW9qaVJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbW9qaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXVpZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInV1aWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm5hbm9pZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuYW5vaWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwibmFub2lkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZDJcIikge1xuICAgICAgICAgICAgICAgIGlmICghY3VpZDJSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVsaWRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdWxpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1bGlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVUkwoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVybFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwicmVnZXhcIikge1xuICAgICAgICAgICAgICAgIGNoZWNrLnJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0ZXN0UmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwicmVnZXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRyaW1cIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaW5jbHVkZXNcIikge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5pbmNsdWRlcyhjaGVjay52YWx1ZSwgY2hlY2sucG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgaW5jbHVkZXM6IGNoZWNrLnZhbHVlLCBwb3NpdGlvbjogY2hlY2sucG9zaXRpb24gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRvTG93ZXJDYXNlXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b1VwcGVyQ2FzZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwic3RhcnRzV2l0aFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLnN0YXJ0c1dpdGgoY2hlY2sudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgc3RhcnRzV2l0aDogY2hlY2sudmFsdWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVuZHNXaXRoXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEuZW5kc1dpdGgoY2hlY2sudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgZW5kc1dpdGg6IGNoZWNrLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkYXRldGltZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBkYXRldGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBkYXRlUmVnZXg7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidGltZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSB0aW1lUmVnZXgoY2hlY2spO1xuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImR1cmF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWR1cmF0aW9uUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImR1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJpcFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSVAoaW5wdXQuZGF0YSwgY2hlY2sudmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiand0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRKV1QoaW5wdXQuZGF0YSwgY2hlY2suYWxnKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImp3dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY2lkclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkQ2lkcihpbnB1dC5kYXRhLCBjaGVjay52ZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImNpZHJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImJhc2U2NFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFiYXNlNjRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiYmFzZTY0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjR1cmxcIikge1xuICAgICAgICAgICAgICAgIGlmICghYmFzZTY0dXJsUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImJhc2U2NHVybFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbiAgICBfcmVnZXgocmVnZXgsIHZhbGlkYXRpb24sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmaW5lbWVudCgoZGF0YSkgPT4gcmVnZXgudGVzdChkYXRhKSwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbixcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbWFpbChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1haWxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1cmwobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcInVybFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGVtb2ppKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJlbW9qaVwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIHV1aWQobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcInV1aWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBuYW5vaWQobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcIm5hbm9pZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGN1aWQobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBjdWlkMihtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiY3VpZDJcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1bGlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1bGlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgYmFzZTY0KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJiYXNlNjRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBiYXNlNjR1cmwobWVzc2FnZSkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJiYXNlNjR1cmxcIixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGp3dChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiand0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zKSB9KTtcbiAgICB9XG4gICAgaXAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImlwXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zKSB9KTtcbiAgICB9XG4gICAgY2lkcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiY2lkclwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGRhdGV0aW1lKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBwcmVjaXNpb246IG51bGwsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsb2NhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogb3B0aW9ucyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICBwcmVjaXNpb246IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZWNpc2lvbikgPT09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZWNpc2lvbixcbiAgICAgICAgICAgIG9mZnNldDogKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9mZnNldCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UsXG4gICAgICAgICAgICBsb2NhbDogKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZSxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkYXRlXCIsIG1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIHRpbWUob3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICAgICAga2luZDogXCJ0aW1lXCIsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJ0aW1lXCIsXG4gICAgICAgICAgICBwcmVjaXNpb246IHR5cGVvZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZWNpc2lvbikgPT09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnByZWNpc2lvbixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkdXJhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZHVyYXRpb25cIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICByZWdleChyZWdleCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJyZWdleFwiLFxuICAgICAgICAgICAgcmVnZXg6IHJlZ2V4LFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW5jbHVkZXModmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiaW5jbHVkZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucG9zaXRpb24sXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhcnRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbmRzV2l0aCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJlbmRzV2l0aFwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5MZW5ndGgsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heExlbmd0aCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibGVuZ3RoXCIsXG4gICAgICAgICAgICB2YWx1ZTogbGVuLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXF1aXZhbGVudCB0byBgLm1pbigxKWBcbiAgICAgKi9cbiAgICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBlcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkpO1xuICAgIH1cbiAgICB0cmltKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7IGtpbmQ6IFwidHJpbVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9Mb3dlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b0xvd2VyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9VcHBlckNhc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0b1VwcGVyQ2FzZVwiIH1dLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGlzRGF0ZXRpbWUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZXRpbWVcIik7XG4gICAgfVxuICAgIGdldCBpc0RhdGUoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZGF0ZVwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVGltZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ0aW1lXCIpO1xuICAgIH1cbiAgICBnZXQgaXNEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkdXJhdGlvblwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1haWwoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1haWxcIik7XG4gICAgfVxuICAgIGdldCBpc1VSTCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1cmxcIik7XG4gICAgfVxuICAgIGdldCBpc0Vtb2ppKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtb2ppXCIpO1xuICAgIH1cbiAgICBnZXQgaXNVVUlEKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInV1aWRcIik7XG4gICAgfVxuICAgIGdldCBpc05BTk9JRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJuYW5vaWRcIik7XG4gICAgfVxuICAgIGdldCBpc0NVSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ1VJRDIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZDJcIik7XG4gICAgfVxuICAgIGdldCBpc1VMSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidWxpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzSVAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaXBcIik7XG4gICAgfVxuICAgIGdldCBpc0NJRFIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY2lkclwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQmFzZTY0dXJsKCkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImJhc2U2NHVybFwiKTtcbiAgICB9XG4gICAgZ2V0IG1pbkxlbmd0aCgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kU3RyaW5nLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN0cmluZyxcbiAgICAgICAgY29lcmNlOiAoX2EgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY29lcmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM5NjY0ODQvd2h5LWRvZXMtbW9kdWx1cy1vcGVyYXRvci1yZXR1cm4tZnJhY3Rpb25hbC1udW1iZXItaW4tamF2YXNjcmlwdC8zMTcxMTAzNCMzMTcxMTAzNFxuZnVuY3Rpb24gZmxvYXRTYWZlUmVtYWluZGVyKHZhbCwgc3RlcCkge1xuICAgIGNvbnN0IHZhbERlY0NvdW50ID0gKHZhbC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gICAgY29uc3Qgc3RlcERlY0NvdW50ID0gKHN0ZXAudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoO1xuICAgIGNvbnN0IGRlY0NvdW50ID0gdmFsRGVjQ291bnQgPiBzdGVwRGVjQ291bnQgPyB2YWxEZWNDb3VudCA6IHN0ZXBEZWNDb3VudDtcbiAgICBjb25zdCB2YWxJbnQgPSBwYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICAgIGNvbnN0IHN0ZXBJbnQgPSBwYXJzZUludChzdGVwLnRvRml4ZWQoZGVjQ291bnQpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICByZXR1cm4gKHZhbEludCAlIHN0ZXBJbnQpIC8gTWF0aC5wb3coMTAsIGRlY0NvdW50KTtcbn1cbmNsYXNzIFpvZE51bWJlciBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgICAgICB0aGlzLnN0ZXAgPSB0aGlzLm11bHRpcGxlT2Y7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IE51bWJlcihpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udW1iZXIsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmVcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIoaW5wdXQuZGF0YSwgY2hlY2sudmFsdWUpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImZpbml0ZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9maW5pdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGludChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImludFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZpbml0ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImZpbml0ZVwiLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2FmZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KS5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5WYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgZ2V0IGlzSW50KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiIHx8XG4gICAgICAgICAgICAoY2gua2luZCA9PT0gXCJtdWx0aXBsZU9mXCIgJiYgdXRpbC5pc0ludGVnZXIoY2gudmFsdWUpKSk7XG4gICAgfVxuICAgIGdldCBpc0Zpbml0ZSgpIHtcbiAgICAgICAgbGV0IG1heCA9IG51bGwsIG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwiZmluaXRlXCIgfHxcbiAgICAgICAgICAgICAgICBjaC5raW5kID09PSBcImludFwiIHx8XG4gICAgICAgICAgICAgICAgY2gua2luZCA9PT0gXCJtdWx0aXBsZU9mXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKG1pbikgJiYgTnVtYmVyLmlzRmluaXRlKG1heCk7XG4gICAgfVxufVxuWm9kTnVtYmVyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bWJlcih7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVtYmVyLFxuICAgICAgICBjb2VyY2U6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY29lcmNlKSB8fCBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZEJpZ0ludCBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgICAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IEJpZ0ludChpbnB1dC5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYmlnaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW52YWxpZElucHV0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlXG4gICAgICAgICAgICAgICAgICAgID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjaGVjay5pbmNsdXNpdmVcbiAgICAgICAgICAgICAgICAgICAgPyBpbnB1dC5kYXRhID4gY2hlY2sudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgOiBpbnB1dC5kYXRhID49IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJpZ2ludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhICUgY2hlY2sudmFsdWUgIT09IEJpZ0ludCgwKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIF9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5iaWdpbnQsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbm9ucG9zaXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgbWluVmFsdWUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgZ2V0IG1heFZhbHVlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxufVxuWm9kQmlnSW50LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJpZ0ludCxcbiAgICAgICAgY29lcmNlOiAoX2EgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY29lcmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZEJvb2xlYW4gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCb29sZWFuKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYm9vbGVhbikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5ib29sZWFuLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZEJvb2xlYW4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQm9vbGVhbih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcbiAgICAgICAgY29lcmNlOiAocGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmNvZXJjZSkgfHwgZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2REYXRlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gbmV3IERhdGUoaW5wdXQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5kYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmRhdGUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOYU4oaW5wdXQuZGF0YS5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9kYXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmdldFRpbWUoKSA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPiBjaGVjay52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLnZhbHVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKGlucHV0LmRhdGEuZ2V0VGltZSgpKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRGF0ZSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtaW4obWluRGF0ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5EYXRlLmdldFRpbWUoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhEYXRlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heERhdGUuZ2V0VGltZSgpLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG1pbkRhdGUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbiAhPSBudWxsID8gbmV3IERhdGUobWluKSA6IG51bGw7XG4gICAgfVxuICAgIGdldCBtYXhEYXRlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggIT0gbnVsbCA/IG5ldyBEYXRlKG1heCkgOiBudWxsO1xuICAgIH1cbn1cblpvZERhdGUuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRGF0ZSh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIGNvZXJjZTogKHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5jb2VyY2UpIHx8IGZhbHNlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERhdGUsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2RTeW1ib2wgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zeW1ib2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc3ltYm9sLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFN5bWJvbC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RTeW1ib2woe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN5bWJvbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZFVuZGVmaW5lZCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS51bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVW5kZWZpbmVkLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFVuZGVmaW5lZCh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5kZWZpbmVkLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kTnVsbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2ROdWxsLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGwoe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2RBbnkgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gdG8gcHJldmVudCBpbnN0YW5jZXMgb2Ygb3RoZXIgY2xhc3NlcyBmcm9tIGV4dGVuZGluZyBab2RBbnkuIHRoaXMgY2F1c2VzIGlzc3VlcyB3aXRoIGNhdGNoYWxsIGluIFpvZE9iamVjdC5cbiAgICAgICAgdGhpcy5fYW55ID0gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RBbnkuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQW55KHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBbnksXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2RVbmtub3duIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHJlcXVpcmVkXG4gICAgICAgIHRoaXMuX3Vua25vd24gPSB0cnVlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFVua25vd24uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5rbm93bih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5rbm93bixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZE5ldmVyIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXG4gICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG59XG5ab2ROZXZlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROZXZlcih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmV2ZXIsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2RWb2lkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnZvaWQsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVm9pZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RWb2lkKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RWb2lkLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kQXJyYXkgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHgsIHN0YXR1cyB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYXJyYXkpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYXJyYXksXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmLmV4YWN0TGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB0b29CaWcgPSBjdHguZGF0YS5sZW5ndGggPiBkZWYuZXhhY3RMZW5ndGgudmFsdWU7XG4gICAgICAgICAgICBjb25zdCB0b29TbWFsbCA9IGN0eC5kYXRhLmxlbmd0aCA8IGRlZi5leGFjdExlbmd0aC52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0b29CaWcgfHwgdG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogdG9vQmlnID8gWm9kSXNzdWVDb2RlLnRvb19iaWcgOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiAodG9vU21hbGwgPyBkZWYuZXhhY3RMZW5ndGgudmFsdWUgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiAodG9vQmlnID8gZGVmLmV4YWN0TGVuZ3RoLnZhbHVlIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV4YWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWYuZXhhY3RMZW5ndGgubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmLm1pbkxlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IGRlZi5taW5MZW5ndGgudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgbWluaW11bTogZGVmLm1pbkxlbmd0aC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmLm1pbkxlbmd0aC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkZWYubWF4TGVuZ3RoICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoID4gZGVmLm1heExlbmd0aC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogZGVmLm1heExlbmd0aC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmLm1heExlbmd0aC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoWy4uLmN0eC5kYXRhXS5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmLnR5cGUuX3BhcnNlQXN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICAgICAgICB9KSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gWy4uLmN0eC5kYXRhXS5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VTeW5jKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQpO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbiAgICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWluTGVuZ3RoOiB7IHZhbHVlOiBtaW5MZW5ndGgsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWF4KG1heExlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1heExlbmd0aDogeyB2YWx1ZTogbWF4TGVuZ3RoLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBleGFjdExlbmd0aDogeyB2YWx1ZTogbGVuLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICAgIH1cbn1cblpvZEFycmF5LmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICB0eXBlOiBzY2hlbWEsXG4gICAgICAgIG1pbkxlbmd0aDogbnVsbCxcbiAgICAgICAgbWF4TGVuZ3RoOiBudWxsLFxuICAgICAgICBleGFjdExlbmd0aDogbnVsbCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBcnJheSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmZ1bmN0aW9uIGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYSkge1xuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RPYmplY3QpIHtcbiAgICAgICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hLnNoYXBlKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHNjaGVtYS5zaGFwZVtrZXldO1xuICAgICAgICAgICAgbmV3U2hhcGVba2V5XSA9IFpvZE9wdGlvbmFsLmNyZWF0ZShkZWVwUGFydGlhbGlmeShmaWVsZFNjaGVtYSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnNjaGVtYS5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi5zY2hlbWEuX2RlZixcbiAgICAgICAgICAgIHR5cGU6IGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYS5lbGVtZW50KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBab2RPcHRpb25hbC5jcmVhdGUoZGVlcFBhcnRpYWxpZnkoc2NoZW1hLnVud3JhcCgpKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBab2ROdWxsYWJsZS5jcmVhdGUoZGVlcFBhcnRpYWxpZnkoc2NoZW1hLnVud3JhcCgpKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZFR1cGxlKSB7XG4gICAgICAgIHJldHVybiBab2RUdXBsZS5jcmVhdGUoc2NoZW1hLml0ZW1zLm1hcCgoaXRlbSkgPT4gZGVlcFBhcnRpYWxpZnkoaXRlbSkpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfVxufVxuY2xhc3MgWm9kT2JqZWN0IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX2NhY2hlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBJbiBtb3N0IGNhc2VzLCB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgLSB1bmtub3duIHByb3BlcnRpZXMgYXJlIG5vdyBzaWxlbnRseSBzdHJpcHBlZC5cbiAgICAgICAgICogSWYgeW91IHdhbnQgdG8gcGFzcyB0aHJvdWdoIHVua25vd24gcHJvcGVydGllcywgdXNlIGAucGFzc3Rocm91Z2goKWAgaW5zdGVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICAgICAgLy8gZXh0ZW5kPFxuICAgICAgICAvLyAgIEF1Z21lbnRhdGlvbiBleHRlbmRzIFpvZFJhd1NoYXBlLFxuICAgICAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX291dHB1dFwiXVxuICAgICAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBPdXRwdXRcbiAgICAgICAgLy8gICAgICAgPyBPdXRwdXRba11cbiAgICAgICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAgICAgLy8gICB9PixcbiAgICAgICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHV0aWwuZmxhdHRlbjx7XG4gICAgICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgICAgICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgSW5wdXRcbiAgICAgICAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgICAgICAvLyAgIH0+XG4gICAgICAgIC8vID4oXG4gICAgICAgIC8vICAgYXVnbWVudGF0aW9uOiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gKTogWm9kT2JqZWN0PFxuICAgICAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIEF1Z21lbnRhdGlvbj4sXG4gICAgICAgIC8vICAgVW5rbm93bktleXMsXG4gICAgICAgIC8vICAgQ2F0Y2hhbGwsXG4gICAgICAgIC8vICAgTmV3T3V0cHV0LFxuICAgICAgICAvLyAgIE5ld0lucHV0XG4gICAgICAgIC8vID4ge1xuICAgICAgICAvLyAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgLy8gICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgLy8gICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAvLyAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgLy8gICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgICAgICAvLyAgICAgfSksXG4gICAgICAgIC8vICAgfSkgYXMgYW55O1xuICAgICAgICAvLyB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYC5leHRlbmRgIGluc3RlYWRcbiAgICAgICAgICogICovXG4gICAgICAgIHRoaXMuYXVnbWVudCA9IHRoaXMuZXh0ZW5kO1xuICAgIH1cbiAgICBfZ2V0Q2FjaGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkICE9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZDtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgICAgIHJldHVybiAodGhpcy5fY2FjaGVkID0geyBzaGFwZSwga2V5cyB9KTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IHsgc2hhcGUsIGtleXM6IHNoYXBlS2V5cyB9ID0gdGhpcy5fZ2V0Q2FjaGVkKCk7XG4gICAgICAgIGNvbnN0IGV4dHJhS2V5cyA9IFtdO1xuICAgICAgICBpZiAoISh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlciAmJlxuICAgICAgICAgICAgdGhpcy5fZGVmLnVua25vd25LZXlzID09PSBcInN0cmlwXCIpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICghc2hhcGVLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFpcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcGVLZXlzKSB7XG4gICAgICAgICAgICBjb25zdCBrZXlWYWxpZGF0b3IgPSBzaGFwZVtrZXldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjdHguZGF0YVtrZXldO1xuICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXG4gICAgICAgICAgICAgICAgdmFsdWU6IGtleVZhbGlkYXRvci5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIHZhbHVlLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZGVmLmNhdGNoYWxsIGluc3RhbmNlb2YgWm9kTmV2ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHVua25vd25LZXlzID0gdGhpcy5fZGVmLnVua25vd25LZXlzO1xuICAgICAgICAgICAgaWYgKHVua25vd25LZXlzID09PSBcInBhc3N0aHJvdWdoXCIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogY3R4LmRhdGFba2V5XSB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1bmtub3duS2V5cyA9PT0gXCJzdHJpY3RcIikge1xuICAgICAgICAgICAgICAgIGlmIChleHRyYUtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS51bnJlY29nbml6ZWRfa2V5cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IGV4dHJhS2V5cyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmlwXCIpIDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW50ZXJuYWwgWm9kT2JqZWN0IGVycm9yOiBpbnZhbGlkIHVua25vd25LZXlzIHZhbHVlLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gcnVuIGNhdGNoYWxsIHZhbGlkYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNhdGNoYWxsID0gdGhpcy5fZGVmLmNhdGNoYWxsO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgZXh0cmFLZXlzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjdHguZGF0YVtrZXldO1xuICAgICAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXkgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNhdGNoYWxsLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpIC8vLCBjdHguY2hpbGQoa2V5KSwgdmFsdWUsIGdldFBhcnNlZFR5cGUodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGFsd2F5c1NldDoga2V5IGluIGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN5bmNQYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWx3YXlzU2V0OiBwYWlyLmFsd2F5c1NldCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzeW5jUGFpcnM7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChzeW5jUGFpcnMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgc3luY1BhaXJzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgc2hhcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgICB9XG4gICAgc3RyaWN0KG1lc3NhZ2UpIHtcbiAgICAgICAgZXJyb3JVdGlsLmVyclRvT2JqO1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICB1bmtub3duS2V5czogXCJzdHJpY3RcIixcbiAgICAgICAgICAgIC4uLihtZXNzYWdlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNYXA6IChpc3N1ZSwgY3R4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0RXJyb3IgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLl9kZWYpLmVycm9yTWFwKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgaXNzdWUsIGN0eCkubWVzc2FnZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcInVucmVjb2duaXplZF9rZXlzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogKF9kID0gZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLm1lc3NhZ2UpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGRlZmF1bHRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkZWZhdWx0RXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0cmlwKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcGFzc3Rocm91Z2goKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHVua25vd25LZXlzOiBcInBhc3N0aHJvdWdoXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBjb25zdCBBdWdtZW50RmFjdG9yeSA9XG4gICAgLy8gICA8RGVmIGV4dGVuZHMgWm9kT2JqZWN0RGVmPihkZWY6IERlZikgPT5cbiAgICAvLyAgIDxBdWdtZW50YXRpb24gZXh0ZW5kcyBab2RSYXdTaGFwZT4oXG4gICAgLy8gICAgIGF1Z21lbnRhdGlvbjogQXVnbWVudGF0aW9uXG4gICAgLy8gICApOiBab2RPYmplY3Q8XG4gICAgLy8gICAgIGV4dGVuZFNoYXBlPFJldHVyblR5cGU8RGVmW1wic2hhcGVcIl0+LCBBdWdtZW50YXRpb24+LFxuICAgIC8vICAgICBEZWZbXCJ1bmtub3duS2V5c1wiXSxcbiAgICAvLyAgICAgRGVmW1wiY2F0Y2hhbGxcIl1cbiAgICAvLyAgID4gPT4ge1xuICAgIC8vICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgLy8gICAgICAgLi4uZGVmLFxuICAgIC8vICAgICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgIC8vICAgICAgICAgLi4uZGVmLnNoYXBlKCksXG4gICAgLy8gICAgICAgICAuLi5hdWdtZW50YXRpb24sXG4gICAgLy8gICAgICAgfSksXG4gICAgLy8gICAgIH0pIGFzIGFueTtcbiAgICAvLyAgIH07XG4gICAgZXh0ZW5kKGF1Z21lbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgICAgICAgICAuLi5hdWdtZW50YXRpb24sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByaW9yIHRvIHpvZEAxLjAuMTIgdGhlcmUgd2FzIGEgYnVnIGluIHRoZVxuICAgICAqIGluZmVycmVkIHR5cGUgb2YgbWVyZ2VkIG9iamVjdHMuIFBsZWFzZVxuICAgICAqIHVwZ3JhZGUgaWYgeW91IGFyZSBleHBlcmllbmNpbmcgaXNzdWVzLlxuICAgICAqL1xuICAgIG1lcmdlKG1lcmdpbmcpIHtcbiAgICAgICAgY29uc3QgbWVyZ2VkID0gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICB1bmtub3duS2V5czogbWVyZ2luZy5fZGVmLnVua25vd25LZXlzLFxuICAgICAgICAgICAgY2F0Y2hhbGw6IG1lcmdpbmcuX2RlZi5jYXRjaGFsbCxcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAgICAgICAgIC4uLm1lcmdpbmcuX2RlZi5zaGFwZSgpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgfVxuICAgIC8vIG1lcmdlPFxuICAgIC8vICAgSW5jb21pbmcgZXh0ZW5kcyBBbnlab2RPYmplY3QsXG4gICAgLy8gICBBdWdtZW50YXRpb24gZXh0ZW5kcyBJbmNvbWluZ1tcInNoYXBlXCJdLFxuICAgIC8vICAgTmV3T3V0cHV0IGV4dGVuZHMge1xuICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBPdXRwdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfb3V0cHV0XCJdXG4gICAgLy8gICAgICAgOiBrIGV4dGVuZHMga2V5b2YgT3V0cHV0XG4gICAgLy8gICAgICAgPyBPdXRwdXRba11cbiAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgIC8vICAgfSxcbiAgICAvLyAgIE5ld0lucHV0IGV4dGVuZHMge1xuICAgIC8vICAgICBbayBpbiBrZXlvZiBBdWdtZW50YXRpb24gfCBrZXlvZiBJbnB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9pbnB1dFwiXVxuICAgIC8vICAgICAgIDogayBleHRlbmRzIGtleW9mIElucHV0XG4gICAgLy8gICAgICAgPyBJbnB1dFtrXVxuICAgIC8vICAgICAgIDogbmV2ZXI7XG4gICAgLy8gICB9XG4gICAgLy8gPihcbiAgICAvLyAgIG1lcmdpbmc6IEluY29taW5nXG4gICAgLy8gKTogWm9kT2JqZWN0PFxuICAgIC8vICAgZXh0ZW5kU2hhcGU8VCwgUmV0dXJuVHlwZTxJbmNvbWluZ1tcIl9kZWZcIl1bXCJzaGFwZVwiXT4+LFxuICAgIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1widW5rbm93bktleXNcIl0sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJjYXRjaGFsbFwiXSxcbiAgICAvLyAgIE5ld091dHB1dCxcbiAgICAvLyAgIE5ld0lucHV0XG4gICAgLy8gPiB7XG4gICAgLy8gICBjb25zdCBtZXJnZWQ6IGFueSA9IG5ldyBab2RPYmplY3Qoe1xuICAgIC8vICAgICB1bmtub3duS2V5czogbWVyZ2luZy5fZGVmLnVua25vd25LZXlzLFxuICAgIC8vICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgIC8vICAgICBzaGFwZTogKCkgPT5cbiAgICAvLyAgICAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzKHRoaXMuX2RlZi5zaGFwZSgpLCBtZXJnaW5nLl9kZWYuc2hhcGUoKSksXG4gICAgLy8gICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgIC8vICAgfSkgYXMgYW55O1xuICAgIC8vICAgcmV0dXJuIG1lcmdlZDtcbiAgICAvLyB9XG4gICAgc2V0S2V5KGtleSwgc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1Z21lbnQoeyBba2V5XTogc2NoZW1hIH0pO1xuICAgIH1cbiAgICAvLyBtZXJnZTxJbmNvbWluZyBleHRlbmRzIEFueVpvZE9iamVjdD4oXG4gICAgLy8gICBtZXJnaW5nOiBJbmNvbWluZ1xuICAgIC8vICk6IC8vWm9kT2JqZWN0PFQgJiBJbmNvbWluZ1tcIl9zaGFwZVwiXSwgVW5rbm93bktleXMsIENhdGNoYWxsPiA9IChtZXJnaW5nKSA9PiB7XG4gICAgLy8gWm9kT2JqZWN0PFxuICAgIC8vICAgZXh0ZW5kU2hhcGU8VCwgUmV0dXJuVHlwZTxJbmNvbWluZ1tcIl9kZWZcIl1bXCJzaGFwZVwiXT4+LFxuICAgIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1widW5rbm93bktleXNcIl0sXG4gICAgLy8gICBJbmNvbWluZ1tcIl9kZWZcIl1bXCJjYXRjaGFsbFwiXVxuICAgIC8vID4ge1xuICAgIC8vICAgLy8gY29uc3QgbWVyZ2VkU2hhcGUgPSBvYmplY3RVdGlsLm1lcmdlU2hhcGVzKFxuICAgIC8vICAgLy8gICB0aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAvLyAgIC8vICAgbWVyZ2luZy5fZGVmLnNoYXBlKClcbiAgICAvLyAgIC8vICk7XG4gICAgLy8gICBjb25zdCBtZXJnZWQ6IGFueSA9IG5ldyBab2RPYmplY3Qoe1xuICAgIC8vICAgICB1bmtub3duS2V5czogbWVyZ2luZy5fZGVmLnVua25vd25LZXlzLFxuICAgIC8vICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgIC8vICAgICBzaGFwZTogKCkgPT5cbiAgICAvLyAgICAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzKHRoaXMuX2RlZi5zaGFwZSgpLCBtZXJnaW5nLl9kZWYuc2hhcGUoKSksXG4gICAgLy8gICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgIC8vICAgfSkgYXMgYW55O1xuICAgIC8vICAgcmV0dXJuIG1lcmdlZDtcbiAgICAvLyB9XG4gICAgY2F0Y2hhbGwoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2F0Y2hhbGw6IGluZGV4LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcGljayhtYXNrKSB7XG4gICAgICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgICAgIHV0aWwub2JqZWN0S2V5cyhtYXNrKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChtYXNrW2tleV0gJiYgdGhpcy5zaGFwZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgc2hhcGVba2V5XSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9taXQobWFzaykge1xuICAgICAgICBjb25zdCBzaGFwZSA9IHt9O1xuICAgICAgICB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1hc2tba2V5XSkge1xuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIGRlZXBQYXJ0aWFsKCkge1xuICAgICAgICByZXR1cm4gZGVlcFBhcnRpYWxpZnkodGhpcyk7XG4gICAgfVxuICAgIHBhcnRpYWwobWFzaykge1xuICAgICAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgICAgICB1dGlsLm9iamVjdEtleXModGhpcy5zaGFwZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWEub3B0aW9uYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlcXVpcmVkKG1hc2spIHtcbiAgICAgICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcbiAgICAgICAgdXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKG1hc2sgJiYgIW1hc2tba2V5XSkge1xuICAgICAgICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RmllbGQgPSBmaWVsZFNjaGVtYTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV3RmllbGQgaW5zdGFuY2VvZiBab2RPcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IG5ld0ZpZWxkLl9kZWYuaW5uZXJUeXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gbmV3RmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBrZXlvZigpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVpvZEVudW0odXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpKTtcbiAgICB9XG59XG5ab2RPYmplY3QuY3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICAgICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcblpvZE9iamVjdC5zdHJpY3RDcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB1bmtub3duS2V5czogXCJzdHJpY3RcIixcbiAgICAgICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcblpvZE9iamVjdC5sYXp5Y3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgIHNoYXBlLFxuICAgICAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgICAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kVW5pb24gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gZmlyc3QgaXNzdWUtZnJlZSB2YWxpZGF0aW9uIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXNzdWVzIGZyb20gZGlydHkgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmV0dXJuIGludmFsaWRcbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgICAgICAgICAgdW5pb25FcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY3R4OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkpLnRoZW4oaGFuZGxlUmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGlydHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjb25zdCBpc3N1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB7IHJlc3VsdCwgY3R4OiBjaGlsZEN0eCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRDdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpcnR5KSB7XG4gICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRpcnR5LnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gaXNzdWVzLm1hcCgoaXNzdWVzKSA9PiBuZXcgWm9kRXJyb3IoaXNzdWVzKSk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgICAgICAgICB1bmlvbkVycm9ycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYub3B0aW9ucztcbiAgICB9XG59XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kVW5pb24oe1xuICAgICAgICBvcHRpb25zOiB0eXBlcyxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmlvbixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy9cbi8vLy8vLy8vLy8gICAgICBab2REaXNjcmltaW5hdGVkVW5pb24gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBnZXREaXNjcmltaW5hdG9yID0gKHR5cGUpID0+IHtcbiAgICBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExhenkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5zY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRWZmZWN0cykge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLmlubmVyVHlwZSgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZExpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIFt0eXBlLnZhbHVlXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHR5cGUub3B0aW9ucztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE5hdGl2ZUVudW0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0VmFsdWVzKHR5cGUuZW51bSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2REZWZhdWx0KSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kVW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtudWxsXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE9wdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBbbnVsbCwgLi4uZ2V0RGlzY3JpbWluYXRvcih0eXBlLnVud3JhcCgpKV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RCcmFuZGVkKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kUmVhZG9ubHkpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RDYXRjaCkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLl9kZWYuaW5uZXJUeXBlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59O1xuY2xhc3MgWm9kRGlzY3JpbWluYXRlZFVuaW9uIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3IgPSB0aGlzLmRpc2NyaW1pbmF0b3I7XG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IGN0eC5kYXRhW2Rpc2NyaW1pbmF0b3JdO1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnNNYXAuZ2V0KGRpc2NyaW1pbmF0b3JWYWx1ZSk7XG4gICAgICAgIGlmICghb3B0aW9uKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IEFycmF5LmZyb20odGhpcy5vcHRpb25zTWFwLmtleXMoKSksXG4gICAgICAgICAgICAgICAgcGF0aDogW2Rpc2NyaW1pbmF0b3JdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZGlzY3JpbWluYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5kaXNjcmltaW5hdG9yO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgb3B0aW9uc01hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29uc3RydWN0b3Igb2YgdGhlIGRpc2NyaW1pbmF0ZWQgdW5pb24gc2NoZW1hLiBJdHMgYmVoYXZpb3VyIGlzIHZlcnkgc2ltaWxhciB0byB0aGF0IG9mIHRoZSBub3JtYWwgei51bmlvbigpIGNvbnN0cnVjdG9yLlxuICAgICAqIEhvd2V2ZXIsIGl0IG9ubHkgYWxsb3dzIGEgdW5pb24gb2Ygb2JqZWN0cywgYWxsIG9mIHdoaWNoIG5lZWQgdG8gc2hhcmUgYSBkaXNjcmltaW5hdG9yIHByb3BlcnR5LiBUaGlzIHByb3BlcnR5IG11c3RcbiAgICAgKiBoYXZlIGEgZGlmZmVyZW50IHZhbHVlIGZvciBlYWNoIG9iamVjdCBpbiB0aGUgdW5pb24uXG4gICAgICogQHBhcmFtIGRpc2NyaW1pbmF0b3IgdGhlIG5hbWUgb2YgdGhlIGRpc2NyaW1pbmF0b3IgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gdHlwZXMgYW4gYXJyYXkgb2Ygb2JqZWN0IHNjaGVtYXNcbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShkaXNjcmltaW5hdG9yLCBvcHRpb25zLCBwYXJhbXMpIHtcbiAgICAgICAgLy8gR2V0IGFsbCB0aGUgdmFsaWQgZGlzY3JpbWluYXRvciB2YWx1ZXNcbiAgICAgICAgY29uc3Qgb3B0aW9uc01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gdHJ5IHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZXMgPSBnZXREaXNjcmltaW5hdG9yKHR5cGUuc2hhcGVbZGlzY3JpbWluYXRvcl0pO1xuICAgICAgICAgICAgaWYgKCFkaXNjcmltaW5hdG9yVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBkaXNjcmltaW5hdG9yIHZhbHVlIGZvciBrZXkgXFxgJHtkaXNjcmltaW5hdG9yfVxcYCBjb3VsZCBub3QgYmUgZXh0cmFjdGVkIGZyb20gYWxsIHNjaGVtYSBvcHRpb25zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGRpc2NyaW1pbmF0b3JWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc01hcC5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlzY3JpbWluYXRvciBwcm9wZXJ0eSAke1N0cmluZyhkaXNjcmltaW5hdG9yKX0gaGFzIGR1cGxpY2F0ZSB2YWx1ZSAke1N0cmluZyh2YWx1ZSl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdGlvbnNNYXAuc2V0KHZhbHVlLCB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFpvZERpc2NyaW1pbmF0ZWRVbmlvbih7XG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERpc2NyaW1pbmF0ZWRVbmlvbixcbiAgICAgICAgICAgIGRpc2NyaW1pbmF0b3IsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uc01hcCxcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2VWYWx1ZXMoYSwgYikge1xuICAgIGNvbnN0IGFUeXBlID0gZ2V0UGFyc2VkVHlwZShhKTtcbiAgICBjb25zdCBiVHlwZSA9IGdldFBhcnNlZFR5cGUoYik7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IGEgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUub2JqZWN0ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICBjb25zdCBiS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhiKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkS2V5cyA9IHV0aWxcbiAgICAgICAgICAgIC5vYmplY3RLZXlzKGEpXG4gICAgICAgICAgICAuZmlsdGVyKChrZXkpID0+IGJLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xuICAgICAgICBjb25zdCBuZXdPYmogPSB7IC4uLmEsIC4uLmIgfTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IHNoYXJlZFZhbHVlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IG5ld09iaiB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhpdGVtQSwgaXRlbUIpO1xuICAgICAgICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXkgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJlxuICAgICAgICBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmXG4gICAgICAgICthID09PSArYikge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogYSB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgfVxufVxuY2xhc3MgWm9kSW50ZXJzZWN0aW9uIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGhhbmRsZVBhcnNlZCA9IChwYXJzZWRMZWZ0LCBwYXJzZWRSaWdodCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzQWJvcnRlZChwYXJzZWRMZWZ0KSB8fCBpc0Fib3J0ZWQocGFyc2VkUmlnaHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZVZhbHVlcyhwYXJzZWRMZWZ0LnZhbHVlLCBwYXJzZWRSaWdodC52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoIW1lcmdlZC52YWxpZCkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNEaXJ0eShwYXJzZWRMZWZ0KSB8fCBpc0RpcnR5KHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBtZXJnZWQuZGF0YSB9O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWYubGVmdC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLnRoZW4oKFtsZWZ0LCByaWdodF0pID0+IGhhbmRsZVBhcnNlZChsZWZ0LCByaWdodCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVBhcnNlZCh0aGlzLl9kZWYubGVmdC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgIH0pLCB0aGlzLl9kZWYucmlnaHQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5ab2RJbnRlcnNlY3Rpb24uY3JlYXRlID0gKGxlZnQsIHJpZ2h0LCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEludGVyc2VjdGlvbih7XG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RJbnRlcnNlY3Rpb24sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2RUdXBsZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYXJyYXkpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYXJyYXksXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN0ID0gdGhpcy5fZGVmLnJlc3Q7XG4gICAgICAgIGlmICghcmVzdCAmJiBjdHguZGF0YS5sZW5ndGggPiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IFsuLi5jdHguZGF0YV1cbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGl0ZW1JbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5fZGVmLml0ZW1zW2l0ZW1JbmRleF0gfHwgdGhpcy5fZGVmLnJlc3Q7XG4gICAgICAgICAgICBpZiAoIXNjaGVtYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWEuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaXRlbUluZGV4KSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZmlsdGVyKCh4KSA9PiAhIXgpOyAvLyBmaWx0ZXIgbnVsbHNcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpdGVtcykudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgaXRlbXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pdGVtcztcbiAgICB9XG4gICAgcmVzdChyZXN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgcmVzdCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuWm9kVHVwbGUuY3JlYXRlID0gKHNjaGVtYXMsIHBhcmFtcykgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWFzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGFuIGFycmF5IG9mIHNjaGVtYXMgdG8gei50dXBsZShbIC4uLiBdKVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBab2RUdXBsZSh7XG4gICAgICAgIGl0ZW1zOiBzY2hlbWFzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFR1cGxlLFxuICAgICAgICByZXN0OiBudWxsLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kUmVjb3JkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGN0eC5kYXRhKSB7XG4gICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBrZXksIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgY3R4LmRhdGFba2V5XSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgICAgICAgIGFsd2F5c1NldDoga2V5IGluIGN0eC5kYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoZmlyc3QsIHNlY29uZCwgdGhpcmQpIHtcbiAgICAgICAgaWYgKHNlY29uZCBpbnN0YW5jZW9mIFpvZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWm9kUmVjb3JkKHtcbiAgICAgICAgICAgICAgICBrZXlUeXBlOiBmaXJzdCxcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHNlY29uZCxcbiAgICAgICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlY29yZCxcbiAgICAgICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXJkKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgWm9kUmVjb3JkKHtcbiAgICAgICAgICAgIGtleVR5cGU6IFpvZFN0cmluZy5jcmVhdGUoKSxcbiAgICAgICAgICAgIHZhbHVlVHlwZTogZmlyc3QsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlY29yZCxcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMoc2Vjb25kKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY2xhc3MgWm9kTWFwIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm1hcCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5tYXAsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIFtpbmRleCwgXCJrZXlcIl0pKSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBbaW5kZXgsIFwidmFsdWVcIl0pKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmluYWxNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXIudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblpvZE1hcC5jcmVhdGUgPSAoa2V5VHlwZSwgdmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE1hcCh7XG4gICAgICAgIHZhbHVlVHlwZSxcbiAgICAgICAga2V5VHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RNYXAsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2RTZXQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnNldCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zZXQsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIGlmIChkZWYubWluU2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPCBkZWYubWluU2l6ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluU2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5taW5TaXplLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5tYXhTaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEuc2l6ZSA+IGRlZi5tYXhTaXplLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4U2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5tYXhTaXplLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgZnVuY3Rpb24gZmluYWxpemVTZXQoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICBwYXJzZWRTZXQuYWRkKGVsZW1lbnQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBwYXJzZWRTZXQgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IFsuLi5jdHguZGF0YS52YWx1ZXMoKV0ubWFwKChpdGVtLCBpKSA9PiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpKTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50cykudGhlbigoZWxlbWVudHMpID0+IGZpbmFsaXplU2V0KGVsZW1lbnRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmluYWxpemVTZXQoZWxlbWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1pbihtaW5TaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1pblNpemU6IHsgdmFsdWU6IG1pblNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWF4KG1heFNpemUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTZXQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWF4U2l6ZTogeyB2YWx1ZTogbWF4U2l6ZSwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaXplKHNpemUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKHNpemUsIG1lc3NhZ2UpLm1heChzaXplLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gICAgfVxufVxuWm9kU2V0LmNyZWF0ZSA9ICh2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgdmFsdWVUeXBlLFxuICAgICAgICBtaW5TaXplOiBudWxsLFxuICAgICAgICBtYXhTaXplOiBudWxsLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFNldCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZEZ1bmN0aW9uIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudmFsaWRhdGUgPSB0aGlzLmltcGxlbWVudDtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuZnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuZnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYWtlQXJnc0lzc3VlKGFyZ3MsIGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIGVycm9yTWFwczogW1xuICAgICAgICAgICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLFxuICAgICAgICAgICAgICAgICAgICBnZXRFcnJvck1hcCgpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvck1hcCxcbiAgICAgICAgICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgICAgICAgICAgICBpc3N1ZURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNFcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VSZXR1cm5zSXNzdWUocmV0dXJucywgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHJldHVybnMsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgICAgICAgICAgICBjdHguc2NoZW1hRXJyb3JNYXAsXG4gICAgICAgICAgICAgICAgICAgIGdldEVycm9yTWFwKCksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWFwLFxuICAgICAgICAgICAgICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICAgICAgICAgIGlzc3VlRGF0YToge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9yZXR1cm5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAgfTtcbiAgICAgICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5yZXR1cm5zIGluc3RhbmNlb2YgWm9kUHJvbWlzZSkge1xuICAgICAgICAgICAgLy8gV291bGQgbG92ZSBhIHdheSB0byBhdm9pZCBkaXNhYmxpbmcgdGhpcyBydWxlLCBidXQgd2UgbmVlZFxuICAgICAgICAgICAgLy8gYW4gYWxpYXMgKHVzaW5nIGFuIGFycm93IGZ1bmN0aW9uIHdhcyB3aGF0IGNhdXNlZCAyNjUxKS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAgICAgY29uc3QgbWUgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9LKGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoW10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhd2FpdCBtZS5fZGVmLmFyZ3NcbiAgICAgICAgICAgICAgICAgICAgLnBhcnNlQXN5bmMoYXJncywgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZUFyZ3NJc3N1ZShhcmdzLCBlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBhd2FpdCBtZS5fZGVmLnJldHVybnMuX2RlZi50eXBlXG4gICAgICAgICAgICAgICAgICAgIC5wYXJzZUFzeW5jKHJlc3VsdCwgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZVJldHVybnNJc3N1ZShyZXN1bHQsIGUpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFJldHVybnM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdvdWxkIGxvdmUgYSB3YXkgdG8gYXZvaWQgZGlzYWJsaW5nIHRoaXMgcnVsZSwgYnV0IHdlIG5lZWRcbiAgICAgICAgICAgIC8vIGFuIGFsaWFzICh1c2luZyBhbiBhcnJvdyBmdW5jdGlvbiB3YXMgd2hhdCBjYXVzZWQgMjY1MSkuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgICAgIGNvbnN0IG1lID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBPSyhmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBtZS5fZGVmLmFyZ3Muc2FmZVBhcnNlKGFyZ3MsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZWRBcmdzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFpvZEVycm9yKFttYWtlQXJnc0lzc3VlKGFyZ3MsIHBhcnNlZEFyZ3MuZXJyb3IpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MuZGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IG1lLl9kZWYucmV0dXJucy5zYWZlUGFyc2UocmVzdWx0LCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkUmV0dXJucy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZVJldHVybnNJc3N1ZShyZXN1bHQsIHBhcnNlZFJldHVybnMuZXJyb3IpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXJhbWV0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmFyZ3M7XG4gICAgfVxuICAgIHJldHVyblR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYucmV0dXJucztcbiAgICB9XG4gICAgYXJncyguLi5pdGVtcykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGFyZ3M6IFpvZFR1cGxlLmNyZWF0ZShpdGVtcykucmVzdChab2RVbmtub3duLmNyZWF0ZSgpKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybnMocmV0dXJuVHlwZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVyblR5cGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbXBsZW1lbnQoZnVuYykge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gICAgfVxuICAgIHN0cmljdEltcGxlbWVudChmdW5jKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZEZ1bmMgPSB0aGlzLnBhcnNlKGZ1bmMpO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVkRnVuYztcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShhcmdzLCByZXR1cm5zLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICBhcmdzOiAoYXJnc1xuICAgICAgICAgICAgICAgID8gYXJnc1xuICAgICAgICAgICAgICAgIDogWm9kVHVwbGUuY3JlYXRlKFtdKS5yZXN0KFpvZFVua25vd24uY3JlYXRlKCkpKSxcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bi5jcmVhdGUoKSxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmNsYXNzIFpvZExhenkgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQgc2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGxhenlTY2hlbWEgPSB0aGlzLl9kZWYuZ2V0dGVyKCk7XG4gICAgICAgIHJldHVybiBsYXp5U2NoZW1hLl9wYXJzZSh7IGRhdGE6IGN0eC5kYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgfVxufVxuWm9kTGF6eS5jcmVhdGUgPSAoZ2V0dGVyLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZExhenkoe1xuICAgICAgICBnZXR0ZXI6IGdldHRlcixcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMYXp5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kTGl0ZXJhbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQuZGF0YSAhPT0gdGhpcy5fZGVmLnZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfbGl0ZXJhbCxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdGhpcy5fZGVmLnZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlO1xuICAgIH1cbn1cblpvZExpdGVyYWwuY3JlYXRlID0gKHZhbHVlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZExpdGVyYWwoe1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTGl0ZXJhbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZVpvZEVudW0odmFsdWVzLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gbmV3IFpvZEVudW0oe1xuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRW51bSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufVxuY2xhc3MgWm9kRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBfWm9kRW51bV9jYWNoZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQuZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IHV0aWwuam9pblZhbHVlcyhleHBlY3RlZFZhbHVlcyksXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmICghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfWm9kRW51bV9jYWNoZSwgXCJmXCIpKSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9ab2RFbnVtX2NhY2hlLCBuZXcgU2V0KHRoaXMuX2RlZi52YWx1ZXMpLCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9ab2RFbnVtX2NhY2hlLCBcImZcIikuaGFzKGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHRoaXMuX2RlZi52YWx1ZXM7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZW51bV92YWx1ZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBleHBlY3RlZFZhbHVlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZXM7XG4gICAgfVxuICAgIGdldCBlbnVtKCkge1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgICB9XG4gICAgZ2V0IFZhbHVlcygpIHtcbiAgICAgICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICAgICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gICAgfVxuICAgIGdldCBFbnVtKCkge1xuICAgICAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgICB9XG4gICAgZXh0cmFjdCh2YWx1ZXMsIG5ld0RlZiA9IHRoaXMuX2RlZikge1xuICAgICAgICByZXR1cm4gWm9kRW51bS5jcmVhdGUodmFsdWVzLCB7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICAuLi5uZXdEZWYsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBleGNsdWRlKHZhbHVlcywgbmV3RGVmID0gdGhpcy5fZGVmKSB7XG4gICAgICAgIHJldHVybiBab2RFbnVtLmNyZWF0ZSh0aGlzLm9wdGlvbnMuZmlsdGVyKChvcHQpID0+ICF2YWx1ZXMuaW5jbHVkZXMob3B0KSksIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIC4uLm5ld0RlZixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuX1pvZEVudW1fY2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuWm9kRW51bS5jcmVhdGUgPSBjcmVhdGVab2RFbnVtO1xuY2xhc3MgWm9kTmF0aXZlRW51bSBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBfWm9kTmF0aXZlRW51bV9jYWNoZS5zZXQodGhpcywgdm9pZCAwKTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZUVudW1WYWx1ZXMgPSB1dGlsLmdldFZhbGlkRW51bVZhbHVlcyh0aGlzLl9kZWYudmFsdWVzKTtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3RyaW5nICYmXG4gICAgICAgICAgICBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogdXRpbC5qb2luVmFsdWVzKGV4cGVjdGVkVmFsdWVzKSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9ab2ROYXRpdmVFbnVtX2NhY2hlLCBcImZcIikpIHtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1pvZE5hdGl2ZUVudW1fY2FjaGUsIG5ldyBTZXQodXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcykpLCBcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9ab2ROYXRpdmVFbnVtX2NhY2hlLCBcImZcIikuaGFzKGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHV0aWwub2JqZWN0VmFsdWVzKG5hdGl2ZUVudW1WYWx1ZXMpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXhwZWN0ZWRWYWx1ZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgZ2V0IGVudW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVzO1xuICAgIH1cbn1cbl9ab2ROYXRpdmVFbnVtX2NhY2hlID0gbmV3IFdlYWtNYXAoKTtcblpvZE5hdGl2ZUVudW0uY3JlYXRlID0gKHZhbHVlcywgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROYXRpdmVFbnVtKHtcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmF0aXZlRW51bSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZFByb21pc2UgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZSAmJlxuICAgICAgICAgICAgY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUucHJvbWlzZSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb21pc2lmaWVkID0gY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZVxuICAgICAgICAgICAgPyBjdHguZGF0YVxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoY3R4LmRhdGEpO1xuICAgICAgICByZXR1cm4gT0socHJvbWlzaWZpZWQudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlLnBhcnNlQXN5bmMoZGF0YSwge1xuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIGVycm9yTWFwOiBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuWm9kUHJvbWlzZS5jcmVhdGUgPSAoc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFByb21pc2Uoe1xuICAgICAgICB0eXBlOiBzY2hlbWEsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUHJvbWlzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZEVmZmVjdHMgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBpbm5lclR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBzb3VyY2VUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0c1xuICAgICAgICAgICAgPyB0aGlzLl9kZWYuc2NoZW1hLnNvdXJjZVR5cGUoKVxuICAgICAgICAgICAgOiB0aGlzLl9kZWYuc2NoZW1hO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgICAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgICAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBhcmcpO1xuICAgICAgICAgICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IHBhdGgoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5wYXRoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY2hlY2tDdHguYWRkSXNzdWUgPSBjaGVja0N0eC5hZGRJc3N1ZS5iaW5kKGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSwgY2hlY2tDdHgpO1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb2Nlc3NlZCkudGhlbihhc3luYyAocHJvY2Vzc2VkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMudmFsdWUgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC5yZWZpbmVtZW50KGFjYywgY2hlY2tDdHgpO1xuICAgICAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIC8vIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkXG4gICAgICAgICAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hXG4gICAgICAgICAgICAgICAgICAgIC5fcGFyc2VBc3luYyh7IGRhdGE6IGN0eC5kYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGlubmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZWZmZWN0LnR5cGUgPT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBc3luY2hyb25vdXMgdHJhbnNmb3JtIGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHJlc3VsdCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWFcbiAgICAgICAgICAgICAgICAgICAgLl9wYXJzZUFzeW5jKHsgZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoYmFzZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQoYmFzZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlZmZlY3QudHJhbnNmb3JtKGJhc2UudmFsdWUsIGNoZWNrQ3R4KSkudGhlbigocmVzdWx0KSA9PiAoeyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHJlc3VsdCB9KSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXRpbC5hc3NlcnROZXZlcihlZmZlY3QpO1xuICAgIH1cbn1cblpvZEVmZmVjdHMuY3JlYXRlID0gKHNjaGVtYSwgZWZmZWN0LCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgICBzY2hlbWEsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgZWZmZWN0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuWm9kRWZmZWN0cy5jcmVhdGVXaXRoUHJlcHJvY2VzcyA9IChwcmVwcm9jZXNzLCBzY2hlbWEsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZWZmZWN0OiB7IHR5cGU6IFwicHJlcHJvY2Vzc1wiLCB0cmFuc2Zvcm06IHByZXByb2Nlc3MgfSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kT3B0aW9uYWwgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kT3B0aW9uYWwuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kT3B0aW9uYWwoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jbGFzcyBab2ROdWxsYWJsZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyhudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZE51bGxhYmxlLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGxhYmxlKHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGxhYmxlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuY2xhc3MgWm9kRGVmYXVsdCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgbGV0IGRhdGEgPSBjdHguZGF0YTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGF0YSA9IHRoaXMuX2RlZi5kZWZhdWx0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVEZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgICB9XG59XG5ab2REZWZhdWx0LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGVmYXVsdCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB0eXBlb2YgcGFyYW1zLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBwYXJhbXMuZGVmYXVsdFxuICAgICAgICAgICAgOiAoKSA9PiBwYXJhbXMuZGVmYXVsdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZENhdGNoIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICAvLyBuZXdDdHggaXMgdXNlZCB0byBub3QgY29sbGVjdCBpc3N1ZXMgZnJvbSBpbm5lciB0eXBlcyBpbiBjdHhcbiAgICAgICAgY29uc3QgbmV3Q3R4ID0ge1xuICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YTogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICBwYXRoOiBuZXdDdHgucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDoge1xuICAgICAgICAgICAgICAgIC4uLm5ld0N0eCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNBc3luYyhyZXN1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFpvZEVycm9yKG5ld0N0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBuZXdDdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBcInZhbGlkXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxuICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX2RlZi5jYXRjaFZhbHVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFpvZEVycm9yKG5ld0N0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVDYXRjaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kQ2F0Y2guY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQ2F0Y2goe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQ2F0Y2gsXG4gICAgICAgIGNhdGNoVmFsdWU6IHR5cGVvZiBwYXJhbXMuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcy5jYXRjaCA6ICgpID0+IHBhcmFtcy5jYXRjaCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmNsYXNzIFpvZE5hTiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm5hbikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5uYW4sXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG59XG5ab2ROYU4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTmFOKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROYU4sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5jb25zdCBCUkFORCA9IFN5bWJvbChcInpvZF9icmFuZFwiKTtcbmNsYXNzIFpvZEJyYW5kZWQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjdHguZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlLl9wYXJzZSh7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbn1cbmNsYXNzIFpvZFBpcGVsaW5lIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVBc3luYyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpblJlc3VsdCA9IGF3YWl0IHRoaXMuX2RlZi5pbi5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGlmIChpblJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKGluUmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYub3V0Ll9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGluUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVBc3luYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaW5SZXN1bHQgPSB0aGlzLl9kZWYuaW4uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChpblJlc3VsdC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGluUmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBcImRpcnR5XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpblJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vdXQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGluUmVzdWx0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShhLCBiKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kUGlwZWxpbmUoe1xuICAgICAgICAgICAgaW46IGEsXG4gICAgICAgICAgICBvdXQ6IGIsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFBpcGVsaW5lLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5jbGFzcyBab2RSZWFkb25seSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gICAgICAgIGNvbnN0IGZyZWV6ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZChkYXRhKSkge1xuICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBPYmplY3QuZnJlZXplKGRhdGEudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0FzeW5jKHJlc3VsdClcbiAgICAgICAgICAgID8gcmVzdWx0LnRoZW4oKGRhdGEpID0+IGZyZWV6ZShkYXRhKSlcbiAgICAgICAgICAgIDogZnJlZXplKHJlc3VsdCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kUmVhZG9ubHkuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kUmVhZG9ubHkoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVhZG9ubHksXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgei5jdXN0b20gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBjbGVhblBhcmFtcyhwYXJhbXMsIGRhdGEpIHtcbiAgICBjb25zdCBwID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gcGFyYW1zKGRhdGEpXG4gICAgICAgIDogdHlwZW9mIHBhcmFtcyA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgPyB7IG1lc3NhZ2U6IHBhcmFtcyB9XG4gICAgICAgICAgICA6IHBhcmFtcztcbiAgICBjb25zdCBwMiA9IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8geyBtZXNzYWdlOiBwIH0gOiBwO1xuICAgIHJldHVybiBwMjtcbn1cbmZ1bmN0aW9uIGN1c3RvbShjaGVjaywgX3BhcmFtcyA9IHt9LCBcbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiBQYXNzIGBmYXRhbGAgaW50byB0aGUgcGFyYW1zIG9iamVjdCBpbnN0ZWFkOlxuICpcbiAqIGBgYHRzXG4gKiB6LnN0cmluZygpLmN1c3RvbSgodmFsKSA9PiB2YWwubGVuZ3RoID4gNSwgeyBmYXRhbDogZmFsc2UgfSlcbiAqIGBgYFxuICpcbiAqL1xuZmF0YWwpIHtcbiAgICBpZiAoY2hlY2spXG4gICAgICAgIHJldHVybiBab2RBbnkuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBjaGVjayhkYXRhKTtcbiAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBjbGVhblBhcmFtcyhfcGFyYW1zLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IF9mYXRhbCA9IChfYiA9IChfYSA9IHBhcmFtcy5mYXRhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmF0YWwpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYWRkSXNzdWUoeyBjb2RlOiBcImN1c3RvbVwiLCAuLi5wYXJhbXMsIGZhdGFsOiBfZmF0YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNsZWFuUGFyYW1zKF9wYXJhbXMsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IF9mYXRhbCA9IChfYiA9IChfYSA9IHBhcmFtcy5mYXRhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmF0YWwpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWU7XG4gICAgICAgICAgICAgICAgY3R4LmFkZElzc3VlKHsgY29kZTogXCJjdXN0b21cIiwgLi4ucGFyYW1zLCBmYXRhbDogX2ZhdGFsIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gWm9kQW55LmNyZWF0ZSgpO1xufVxuY29uc3QgbGF0ZSA9IHtcbiAgICBvYmplY3Q6IFpvZE9iamVjdC5sYXp5Y3JlYXRlLFxufTtcbnZhciBab2RGaXJzdFBhcnR5VHlwZUtpbmQ7XG4oZnVuY3Rpb24gKFpvZEZpcnN0UGFydHlUeXBlS2luZCkge1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFN0cmluZ1wiXSA9IFwiWm9kU3RyaW5nXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVtYmVyXCJdID0gXCJab2ROdW1iZXJcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROYU5cIl0gPSBcIlpvZE5hTlwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEJpZ0ludFwiXSA9IFwiWm9kQmlnSW50XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQm9vbGVhblwiXSA9IFwiWm9kQm9vbGVhblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZERhdGVcIl0gPSBcIlpvZERhdGVcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTeW1ib2xcIl0gPSBcIlpvZFN5bWJvbFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFVuZGVmaW5lZFwiXSA9IFwiWm9kVW5kZWZpbmVkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTnVsbFwiXSA9IFwiWm9kTnVsbFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEFueVwiXSA9IFwiWm9kQW55XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVW5rbm93blwiXSA9IFwiWm9kVW5rbm93blwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5ldmVyXCJdID0gXCJab2ROZXZlclwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFZvaWRcIl0gPSBcIlpvZFZvaWRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RBcnJheVwiXSA9IFwiWm9kQXJyYXlcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RPYmplY3RcIl0gPSBcIlpvZE9iamVjdFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFVuaW9uXCJdID0gXCJab2RVbmlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZERpc2NyaW1pbmF0ZWRVbmlvblwiXSA9IFwiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kSW50ZXJzZWN0aW9uXCJdID0gXCJab2RJbnRlcnNlY3Rpb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RUdXBsZVwiXSA9IFwiWm9kVHVwbGVcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RSZWNvcmRcIl0gPSBcIlpvZFJlY29yZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE1hcFwiXSA9IFwiWm9kTWFwXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU2V0XCJdID0gXCJab2RTZXRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RGdW5jdGlvblwiXSA9IFwiWm9kRnVuY3Rpb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RMYXp5XCJdID0gXCJab2RMYXp5XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTGl0ZXJhbFwiXSA9IFwiWm9kTGl0ZXJhbFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEVudW1cIl0gPSBcIlpvZEVudW1cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RFZmZlY3RzXCJdID0gXCJab2RFZmZlY3RzXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmF0aXZlRW51bVwiXSA9IFwiWm9kTmF0aXZlRW51bVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE9wdGlvbmFsXCJdID0gXCJab2RPcHRpb25hbFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE51bGxhYmxlXCJdID0gXCJab2ROdWxsYWJsZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZERlZmF1bHRcIl0gPSBcIlpvZERlZmF1bHRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RDYXRjaFwiXSA9IFwiWm9kQ2F0Y2hcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RQcm9taXNlXCJdID0gXCJab2RQcm9taXNlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQnJhbmRlZFwiXSA9IFwiWm9kQnJhbmRlZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFBpcGVsaW5lXCJdID0gXCJab2RQaXBlbGluZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFJlYWRvbmx5XCJdID0gXCJab2RSZWFkb25seVwiO1xufSkoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kIHx8IChab2RGaXJzdFBhcnR5VHlwZUtpbmQgPSB7fSkpO1xuY29uc3QgaW5zdGFuY2VPZlR5cGUgPSAoXG4vLyBjb25zdCBpbnN0YW5jZU9mVHlwZSA9IDxUIGV4dGVuZHMgbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihcbmNscywgcGFyYW1zID0ge1xuICAgIG1lc3NhZ2U6IGBJbnB1dCBub3QgaW5zdGFuY2Ugb2YgJHtjbHMubmFtZX1gLFxufSkgPT4gY3VzdG9tKChkYXRhKSA9PiBkYXRhIGluc3RhbmNlb2YgY2xzLCBwYXJhbXMpO1xuY29uc3Qgc3RyaW5nVHlwZSA9IFpvZFN0cmluZy5jcmVhdGU7XG5jb25zdCBudW1iZXJUeXBlID0gWm9kTnVtYmVyLmNyZWF0ZTtcbmNvbnN0IG5hblR5cGUgPSBab2ROYU4uY3JlYXRlO1xuY29uc3QgYmlnSW50VHlwZSA9IFpvZEJpZ0ludC5jcmVhdGU7XG5jb25zdCBib29sZWFuVHlwZSA9IFpvZEJvb2xlYW4uY3JlYXRlO1xuY29uc3QgZGF0ZVR5cGUgPSBab2REYXRlLmNyZWF0ZTtcbmNvbnN0IHN5bWJvbFR5cGUgPSBab2RTeW1ib2wuY3JlYXRlO1xuY29uc3QgdW5kZWZpbmVkVHlwZSA9IFpvZFVuZGVmaW5lZC5jcmVhdGU7XG5jb25zdCBudWxsVHlwZSA9IFpvZE51bGwuY3JlYXRlO1xuY29uc3QgYW55VHlwZSA9IFpvZEFueS5jcmVhdGU7XG5jb25zdCB1bmtub3duVHlwZSA9IFpvZFVua25vd24uY3JlYXRlO1xuY29uc3QgbmV2ZXJUeXBlID0gWm9kTmV2ZXIuY3JlYXRlO1xuY29uc3Qgdm9pZFR5cGUgPSBab2RWb2lkLmNyZWF0ZTtcbmNvbnN0IGFycmF5VHlwZSA9IFpvZEFycmF5LmNyZWF0ZTtcbmNvbnN0IG9iamVjdFR5cGUgPSBab2RPYmplY3QuY3JlYXRlO1xuY29uc3Qgc3RyaWN0T2JqZWN0VHlwZSA9IFpvZE9iamVjdC5zdHJpY3RDcmVhdGU7XG5jb25zdCB1bmlvblR5cGUgPSBab2RVbmlvbi5jcmVhdGU7XG5jb25zdCBkaXNjcmltaW5hdGVkVW5pb25UeXBlID0gWm9kRGlzY3JpbWluYXRlZFVuaW9uLmNyZWF0ZTtcbmNvbnN0IGludGVyc2VjdGlvblR5cGUgPSBab2RJbnRlcnNlY3Rpb24uY3JlYXRlO1xuY29uc3QgdHVwbGVUeXBlID0gWm9kVHVwbGUuY3JlYXRlO1xuY29uc3QgcmVjb3JkVHlwZSA9IFpvZFJlY29yZC5jcmVhdGU7XG5jb25zdCBtYXBUeXBlID0gWm9kTWFwLmNyZWF0ZTtcbmNvbnN0IHNldFR5cGUgPSBab2RTZXQuY3JlYXRlO1xuY29uc3QgZnVuY3Rpb25UeXBlID0gWm9kRnVuY3Rpb24uY3JlYXRlO1xuY29uc3QgbGF6eVR5cGUgPSBab2RMYXp5LmNyZWF0ZTtcbmNvbnN0IGxpdGVyYWxUeXBlID0gWm9kTGl0ZXJhbC5jcmVhdGU7XG5jb25zdCBlbnVtVHlwZSA9IFpvZEVudW0uY3JlYXRlO1xuY29uc3QgbmF0aXZlRW51bVR5cGUgPSBab2ROYXRpdmVFbnVtLmNyZWF0ZTtcbmNvbnN0IHByb21pc2VUeXBlID0gWm9kUHJvbWlzZS5jcmVhdGU7XG5jb25zdCBlZmZlY3RzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlO1xuY29uc3Qgb3B0aW9uYWxUeXBlID0gWm9kT3B0aW9uYWwuY3JlYXRlO1xuY29uc3QgbnVsbGFibGVUeXBlID0gWm9kTnVsbGFibGUuY3JlYXRlO1xuY29uc3QgcHJlcHJvY2Vzc1R5cGUgPSBab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzO1xuY29uc3QgcGlwZWxpbmVUeXBlID0gWm9kUGlwZWxpbmUuY3JlYXRlO1xuY29uc3Qgb3N0cmluZyA9ICgpID0+IHN0cmluZ1R5cGUoKS5vcHRpb25hbCgpO1xuY29uc3Qgb251bWJlciA9ICgpID0+IG51bWJlclR5cGUoKS5vcHRpb25hbCgpO1xuY29uc3Qgb2Jvb2xlYW4gPSAoKSA9PiBib29sZWFuVHlwZSgpLm9wdGlvbmFsKCk7XG5jb25zdCBjb2VyY2UgPSB7XG4gICAgc3RyaW5nOiAoKGFyZykgPT4gWm9kU3RyaW5nLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbiAgICBudW1iZXI6ICgoYXJnKSA9PiBab2ROdW1iZXIuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGJvb2xlYW46ICgoYXJnKSA9PiBab2RCb29sZWFuLmNyZWF0ZSh7XG4gICAgICAgIC4uLmFyZyxcbiAgICAgICAgY29lcmNlOiB0cnVlLFxuICAgIH0pKSxcbiAgICBiaWdpbnQ6ICgoYXJnKSA9PiBab2RCaWdJbnQuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIGRhdGU6ICgoYXJnKSA9PiBab2REYXRlLmNyZWF0ZSh7IC4uLmFyZywgY29lcmNlOiB0cnVlIH0pKSxcbn07XG5jb25zdCBORVZFUiA9IElOVkFMSUQ7XG5cbnZhciB6ID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBkZWZhdWx0RXJyb3JNYXA6IGVycm9yTWFwLFxuICAgIHNldEVycm9yTWFwOiBzZXRFcnJvck1hcCxcbiAgICBnZXRFcnJvck1hcDogZ2V0RXJyb3JNYXAsXG4gICAgbWFrZUlzc3VlOiBtYWtlSXNzdWUsXG4gICAgRU1QVFlfUEFUSDogRU1QVFlfUEFUSCxcbiAgICBhZGRJc3N1ZVRvQ29udGV4dDogYWRkSXNzdWVUb0NvbnRleHQsXG4gICAgUGFyc2VTdGF0dXM6IFBhcnNlU3RhdHVzLFxuICAgIElOVkFMSUQ6IElOVkFMSUQsXG4gICAgRElSVFk6IERJUlRZLFxuICAgIE9LOiBPSyxcbiAgICBpc0Fib3J0ZWQ6IGlzQWJvcnRlZCxcbiAgICBpc0RpcnR5OiBpc0RpcnR5LFxuICAgIGlzVmFsaWQ6IGlzVmFsaWQsXG4gICAgaXNBc3luYzogaXNBc3luYyxcbiAgICBnZXQgdXRpbCAoKSB7IHJldHVybiB1dGlsOyB9LFxuICAgIGdldCBvYmplY3RVdGlsICgpIHsgcmV0dXJuIG9iamVjdFV0aWw7IH0sXG4gICAgWm9kUGFyc2VkVHlwZTogWm9kUGFyc2VkVHlwZSxcbiAgICBnZXRQYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlLFxuICAgIFpvZFR5cGU6IFpvZFR5cGUsXG4gICAgZGF0ZXRpbWVSZWdleDogZGF0ZXRpbWVSZWdleCxcbiAgICBab2RTdHJpbmc6IFpvZFN0cmluZyxcbiAgICBab2ROdW1iZXI6IFpvZE51bWJlcixcbiAgICBab2RCaWdJbnQ6IFpvZEJpZ0ludCxcbiAgICBab2RCb29sZWFuOiBab2RCb29sZWFuLFxuICAgIFpvZERhdGU6IFpvZERhdGUsXG4gICAgWm9kU3ltYm9sOiBab2RTeW1ib2wsXG4gICAgWm9kVW5kZWZpbmVkOiBab2RVbmRlZmluZWQsXG4gICAgWm9kTnVsbDogWm9kTnVsbCxcbiAgICBab2RBbnk6IFpvZEFueSxcbiAgICBab2RVbmtub3duOiBab2RVbmtub3duLFxuICAgIFpvZE5ldmVyOiBab2ROZXZlcixcbiAgICBab2RWb2lkOiBab2RWb2lkLFxuICAgIFpvZEFycmF5OiBab2RBcnJheSxcbiAgICBab2RPYmplY3Q6IFpvZE9iamVjdCxcbiAgICBab2RVbmlvbjogWm9kVW5pb24sXG4gICAgWm9kRGlzY3JpbWluYXRlZFVuaW9uOiBab2REaXNjcmltaW5hdGVkVW5pb24sXG4gICAgWm9kSW50ZXJzZWN0aW9uOiBab2RJbnRlcnNlY3Rpb24sXG4gICAgWm9kVHVwbGU6IFpvZFR1cGxlLFxuICAgIFpvZFJlY29yZDogWm9kUmVjb3JkLFxuICAgIFpvZE1hcDogWm9kTWFwLFxuICAgIFpvZFNldDogWm9kU2V0LFxuICAgIFpvZEZ1bmN0aW9uOiBab2RGdW5jdGlvbixcbiAgICBab2RMYXp5OiBab2RMYXp5LFxuICAgIFpvZExpdGVyYWw6IFpvZExpdGVyYWwsXG4gICAgWm9kRW51bTogWm9kRW51bSxcbiAgICBab2ROYXRpdmVFbnVtOiBab2ROYXRpdmVFbnVtLFxuICAgIFpvZFByb21pc2U6IFpvZFByb21pc2UsXG4gICAgWm9kRWZmZWN0czogWm9kRWZmZWN0cyxcbiAgICBab2RUcmFuc2Zvcm1lcjogWm9kRWZmZWN0cyxcbiAgICBab2RPcHRpb25hbDogWm9kT3B0aW9uYWwsXG4gICAgWm9kTnVsbGFibGU6IFpvZE51bGxhYmxlLFxuICAgIFpvZERlZmF1bHQ6IFpvZERlZmF1bHQsXG4gICAgWm9kQ2F0Y2g6IFpvZENhdGNoLFxuICAgIFpvZE5hTjogWm9kTmFOLFxuICAgIEJSQU5EOiBCUkFORCxcbiAgICBab2RCcmFuZGVkOiBab2RCcmFuZGVkLFxuICAgIFpvZFBpcGVsaW5lOiBab2RQaXBlbGluZSxcbiAgICBab2RSZWFkb25seTogWm9kUmVhZG9ubHksXG4gICAgY3VzdG9tOiBjdXN0b20sXG4gICAgU2NoZW1hOiBab2RUeXBlLFxuICAgIFpvZFNjaGVtYTogWm9kVHlwZSxcbiAgICBsYXRlOiBsYXRlLFxuICAgIGdldCBab2RGaXJzdFBhcnR5VHlwZUtpbmQgKCkgeyByZXR1cm4gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kOyB9LFxuICAgIGNvZXJjZTogY29lcmNlLFxuICAgIGFueTogYW55VHlwZSxcbiAgICBhcnJheTogYXJyYXlUeXBlLFxuICAgIGJpZ2ludDogYmlnSW50VHlwZSxcbiAgICBib29sZWFuOiBib29sZWFuVHlwZSxcbiAgICBkYXRlOiBkYXRlVHlwZSxcbiAgICBkaXNjcmltaW5hdGVkVW5pb246IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUsXG4gICAgZWZmZWN0OiBlZmZlY3RzVHlwZSxcbiAgICAnZW51bSc6IGVudW1UeXBlLFxuICAgICdmdW5jdGlvbic6IGZ1bmN0aW9uVHlwZSxcbiAgICAnaW5zdGFuY2VvZic6IGluc3RhbmNlT2ZUeXBlLFxuICAgIGludGVyc2VjdGlvbjogaW50ZXJzZWN0aW9uVHlwZSxcbiAgICBsYXp5OiBsYXp5VHlwZSxcbiAgICBsaXRlcmFsOiBsaXRlcmFsVHlwZSxcbiAgICBtYXA6IG1hcFR5cGUsXG4gICAgbmFuOiBuYW5UeXBlLFxuICAgIG5hdGl2ZUVudW06IG5hdGl2ZUVudW1UeXBlLFxuICAgIG5ldmVyOiBuZXZlclR5cGUsXG4gICAgJ251bGwnOiBudWxsVHlwZSxcbiAgICBudWxsYWJsZTogbnVsbGFibGVUeXBlLFxuICAgIG51bWJlcjogbnVtYmVyVHlwZSxcbiAgICBvYmplY3Q6IG9iamVjdFR5cGUsXG4gICAgb2Jvb2xlYW46IG9ib29sZWFuLFxuICAgIG9udW1iZXI6IG9udW1iZXIsXG4gICAgb3B0aW9uYWw6IG9wdGlvbmFsVHlwZSxcbiAgICBvc3RyaW5nOiBvc3RyaW5nLFxuICAgIHBpcGVsaW5lOiBwaXBlbGluZVR5cGUsXG4gICAgcHJlcHJvY2VzczogcHJlcHJvY2Vzc1R5cGUsXG4gICAgcHJvbWlzZTogcHJvbWlzZVR5cGUsXG4gICAgcmVjb3JkOiByZWNvcmRUeXBlLFxuICAgIHNldDogc2V0VHlwZSxcbiAgICBzdHJpY3RPYmplY3Q6IHN0cmljdE9iamVjdFR5cGUsXG4gICAgc3RyaW5nOiBzdHJpbmdUeXBlLFxuICAgIHN5bWJvbDogc3ltYm9sVHlwZSxcbiAgICB0cmFuc2Zvcm1lcjogZWZmZWN0c1R5cGUsXG4gICAgdHVwbGU6IHR1cGxlVHlwZSxcbiAgICAndW5kZWZpbmVkJzogdW5kZWZpbmVkVHlwZSxcbiAgICB1bmlvbjogdW5pb25UeXBlLFxuICAgIHVua25vd246IHVua25vd25UeXBlLFxuICAgICd2b2lkJzogdm9pZFR5cGUsXG4gICAgTkVWRVI6IE5FVkVSLFxuICAgIFpvZElzc3VlQ29kZTogWm9kSXNzdWVDb2RlLFxuICAgIHF1b3RlbGVzc0pzb246IHF1b3RlbGVzc0pzb24sXG4gICAgWm9kRXJyb3I6IFpvZEVycm9yXG59KTtcblxuZXhwb3J0IHsgQlJBTkQsIERJUlRZLCBFTVBUWV9QQVRILCBJTlZBTElELCBORVZFUiwgT0ssIFBhcnNlU3RhdHVzLCBab2RUeXBlIGFzIFNjaGVtYSwgWm9kQW55LCBab2RBcnJheSwgWm9kQmlnSW50LCBab2RCb29sZWFuLCBab2RCcmFuZGVkLCBab2RDYXRjaCwgWm9kRGF0ZSwgWm9kRGVmYXVsdCwgWm9kRGlzY3JpbWluYXRlZFVuaW9uLCBab2RFZmZlY3RzLCBab2RFbnVtLCBab2RFcnJvciwgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLCBab2RGdW5jdGlvbiwgWm9kSW50ZXJzZWN0aW9uLCBab2RJc3N1ZUNvZGUsIFpvZExhenksIFpvZExpdGVyYWwsIFpvZE1hcCwgWm9kTmFOLCBab2ROYXRpdmVFbnVtLCBab2ROZXZlciwgWm9kTnVsbCwgWm9kTnVsbGFibGUsIFpvZE51bWJlciwgWm9kT2JqZWN0LCBab2RPcHRpb25hbCwgWm9kUGFyc2VkVHlwZSwgWm9kUGlwZWxpbmUsIFpvZFByb21pc2UsIFpvZFJlYWRvbmx5LCBab2RSZWNvcmQsIFpvZFR5cGUgYXMgWm9kU2NoZW1hLCBab2RTZXQsIFpvZFN0cmluZywgWm9kU3ltYm9sLCBab2RFZmZlY3RzIGFzIFpvZFRyYW5zZm9ybWVyLCBab2RUdXBsZSwgWm9kVHlwZSwgWm9kVW5kZWZpbmVkLCBab2RVbmlvbiwgWm9kVW5rbm93biwgWm9kVm9pZCwgYWRkSXNzdWVUb0NvbnRleHQsIGFueVR5cGUgYXMgYW55LCBhcnJheVR5cGUgYXMgYXJyYXksIGJpZ0ludFR5cGUgYXMgYmlnaW50LCBib29sZWFuVHlwZSBhcyBib29sZWFuLCBjb2VyY2UsIGN1c3RvbSwgZGF0ZVR5cGUgYXMgZGF0ZSwgZGF0ZXRpbWVSZWdleCwgeiBhcyBkZWZhdWx0LCBlcnJvck1hcCBhcyBkZWZhdWx0RXJyb3JNYXAsIGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUgYXMgZGlzY3JpbWluYXRlZFVuaW9uLCBlZmZlY3RzVHlwZSBhcyBlZmZlY3QsIGVudW1UeXBlIGFzIGVudW0sIGZ1bmN0aW9uVHlwZSBhcyBmdW5jdGlvbiwgZ2V0RXJyb3JNYXAsIGdldFBhcnNlZFR5cGUsIGluc3RhbmNlT2ZUeXBlIGFzIGluc3RhbmNlb2YsIGludGVyc2VjdGlvblR5cGUgYXMgaW50ZXJzZWN0aW9uLCBpc0Fib3J0ZWQsIGlzQXN5bmMsIGlzRGlydHksIGlzVmFsaWQsIGxhdGUsIGxhenlUeXBlIGFzIGxhenksIGxpdGVyYWxUeXBlIGFzIGxpdGVyYWwsIG1ha2VJc3N1ZSwgbWFwVHlwZSBhcyBtYXAsIG5hblR5cGUgYXMgbmFuLCBuYXRpdmVFbnVtVHlwZSBhcyBuYXRpdmVFbnVtLCBuZXZlclR5cGUgYXMgbmV2ZXIsIG51bGxUeXBlIGFzIG51bGwsIG51bGxhYmxlVHlwZSBhcyBudWxsYWJsZSwgbnVtYmVyVHlwZSBhcyBudW1iZXIsIG9iamVjdFR5cGUgYXMgb2JqZWN0LCBvYmplY3RVdGlsLCBvYm9vbGVhbiwgb251bWJlciwgb3B0aW9uYWxUeXBlIGFzIG9wdGlvbmFsLCBvc3RyaW5nLCBwaXBlbGluZVR5cGUgYXMgcGlwZWxpbmUsIHByZXByb2Nlc3NUeXBlIGFzIHByZXByb2Nlc3MsIHByb21pc2VUeXBlIGFzIHByb21pc2UsIHF1b3RlbGVzc0pzb24sIHJlY29yZFR5cGUgYXMgcmVjb3JkLCBzZXRUeXBlIGFzIHNldCwgc2V0RXJyb3JNYXAsIHN0cmljdE9iamVjdFR5cGUgYXMgc3RyaWN0T2JqZWN0LCBzdHJpbmdUeXBlIGFzIHN0cmluZywgc3ltYm9sVHlwZSBhcyBzeW1ib2wsIGVmZmVjdHNUeXBlIGFzIHRyYW5zZm9ybWVyLCB0dXBsZVR5cGUgYXMgdHVwbGUsIHVuZGVmaW5lZFR5cGUgYXMgdW5kZWZpbmVkLCB1bmlvblR5cGUgYXMgdW5pb24sIHVua25vd25UeXBlIGFzIHVua25vd24sIHV0aWwsIHZvaWRUeXBlIGFzIHZvaWQsIHogfTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwiYXNzZXJ0RXF1YWwiLCJ2YWwiLCJhc3NlcnRJcyIsIl9hcmciLCJhc3NlcnROZXZlciIsIl94IiwiRXJyb3IiLCJhcnJheVRvRW51bSIsIml0ZW1zIiwib2JqIiwiaXRlbSIsImdldFZhbGlkRW51bVZhbHVlcyIsInZhbGlkS2V5cyIsIm9iamVjdEtleXMiLCJmaWx0ZXIiLCJrIiwiZmlsdGVyZWQiLCJvYmplY3RWYWx1ZXMiLCJtYXAiLCJlIiwiT2JqZWN0Iiwia2V5cyIsIm9iamVjdCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInB1c2giLCJmaW5kIiwiYXJyIiwiY2hlY2tlciIsInVuZGVmaW5lZCIsImlzSW50ZWdlciIsIk51bWJlciIsImlzRmluaXRlIiwiTWF0aCIsImZsb29yIiwiam9pblZhbHVlcyIsImFycmF5Iiwic2VwYXJhdG9yIiwiam9pbiIsImpzb25TdHJpbmdpZnlSZXBsYWNlciIsIl8iLCJ2YWx1ZSIsInRvU3RyaW5nIiwib2JqZWN0VXRpbCIsIm1lcmdlU2hhcGVzIiwiZmlyc3QiLCJzZWNvbmQiLCJab2RQYXJzZWRUeXBlIiwiZ2V0UGFyc2VkVHlwZSIsImRhdGEiLCJ0Iiwic3RyaW5nIiwiaXNOYU4iLCJuYW4iLCJudW1iZXIiLCJib29sZWFuIiwiZnVuY3Rpb24iLCJiaWdpbnQiLCJzeW1ib2wiLCJBcnJheSIsImlzQXJyYXkiLCJudWxsIiwidGhlbiIsImNhdGNoIiwicHJvbWlzZSIsIk1hcCIsIlNldCIsInNldCIsIkRhdGUiLCJkYXRlIiwidW5rbm93biIsIlpvZElzc3VlQ29kZSIsInF1b3RlbGVzc0pzb24iLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlcGxhY2UiLCJab2RFcnJvciIsImVycm9ycyIsImlzc3VlcyIsImNvbnN0cnVjdG9yIiwiYWRkSXNzdWUiLCJzdWIiLCJhZGRJc3N1ZXMiLCJzdWJzIiwiYWN0dWFsUHJvdG8iLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIm5hbWUiLCJmb3JtYXQiLCJfbWFwcGVyIiwibWFwcGVyIiwiaXNzdWUiLCJtZXNzYWdlIiwiZmllbGRFcnJvcnMiLCJfZXJyb3JzIiwicHJvY2Vzc0Vycm9yIiwiZXJyb3IiLCJjb2RlIiwidW5pb25FcnJvcnMiLCJyZXR1cm5UeXBlRXJyb3IiLCJhcmd1bWVudHNFcnJvciIsInBhdGgiLCJsZW5ndGgiLCJjdXJyIiwiaSIsImVsIiwidGVybWluYWwiLCJhc3NlcnQiLCJpc0VtcHR5IiwiZmxhdHRlbiIsImZvcm1FcnJvcnMiLCJjcmVhdGUiLCJlcnJvck1hcCIsIl9jdHgiLCJpbnZhbGlkX3R5cGUiLCJyZWNlaXZlZCIsImV4cGVjdGVkIiwiaW52YWxpZF9saXRlcmFsIiwidW5yZWNvZ25pemVkX2tleXMiLCJpbnZhbGlkX3VuaW9uIiwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yIiwib3B0aW9ucyIsImludmFsaWRfZW51bV92YWx1ZSIsImludmFsaWRfYXJndW1lbnRzIiwiaW52YWxpZF9yZXR1cm5fdHlwZSIsImludmFsaWRfZGF0ZSIsImludmFsaWRfc3RyaW5nIiwidmFsaWRhdGlvbiIsImluY2x1ZGVzIiwicG9zaXRpb24iLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJ0b29fc21hbGwiLCJ0eXBlIiwiZXhhY3QiLCJpbmNsdXNpdmUiLCJtaW5pbXVtIiwidG9vX2JpZyIsIm1heGltdW0iLCJjdXN0b20iLCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlcyIsIm5vdF9tdWx0aXBsZV9vZiIsIm11bHRpcGxlT2YiLCJub3RfZmluaXRlIiwiZGVmYXVsdEVycm9yIiwib3ZlcnJpZGVFcnJvck1hcCIsInNldEVycm9yTWFwIiwiZ2V0RXJyb3JNYXAiLCJtYWtlSXNzdWUiLCJwYXJhbXMiLCJlcnJvck1hcHMiLCJpc3N1ZURhdGEiLCJmdWxsUGF0aCIsImZ1bGxJc3N1ZSIsImVycm9yTWVzc2FnZSIsIm1hcHMiLCJtIiwic2xpY2UiLCJyZXZlcnNlIiwiRU1QVFlfUEFUSCIsImFkZElzc3VlVG9Db250ZXh0IiwiY3R4Iiwib3ZlcnJpZGVNYXAiLCJjb21tb24iLCJjb250ZXh0dWFsRXJyb3JNYXAiLCJzY2hlbWFFcnJvck1hcCIsIngiLCJQYXJzZVN0YXR1cyIsImRpcnR5IiwiYWJvcnQiLCJtZXJnZUFycmF5Iiwic3RhdHVzIiwicmVzdWx0cyIsImFycmF5VmFsdWUiLCJzIiwiSU5WQUxJRCIsIm1lcmdlT2JqZWN0QXN5bmMiLCJwYWlycyIsInN5bmNQYWlycyIsInBhaXIiLCJtZXJnZU9iamVjdFN5bmMiLCJmaW5hbE9iamVjdCIsImFsd2F5c1NldCIsImZyZWV6ZSIsIkRJUlRZIiwiT0siLCJpc0Fib3J0ZWQiLCJpc0RpcnR5IiwiaXNWYWxpZCIsImlzQXN5bmMiLCJQcm9taXNlIiwiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImdldCIsIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJzdXBwcmVzc2VkIiwiZXJyb3JVdGlsIiwiZXJyVG9PYmoiLCJfWm9kRW51bV9jYWNoZSIsIl9ab2ROYXRpdmVFbnVtX2NhY2hlIiwiUGFyc2VJbnB1dExhenlQYXRoIiwicGFyZW50IiwiX2NhY2hlZFBhdGgiLCJfcGF0aCIsIl9rZXkiLCJoYW5kbGVSZXN1bHQiLCJyZXN1bHQiLCJzdWNjZXNzIiwiX2Vycm9yIiwicHJvY2Vzc0NyZWF0ZVBhcmFtcyIsImludmFsaWRfdHlwZV9lcnJvciIsInJlcXVpcmVkX2Vycm9yIiwiZGVzY3JpcHRpb24iLCJjdXN0b21NYXAiLCJpc3MiLCJfYSIsIl9iIiwiWm9kVHlwZSIsIl9kZWYiLCJfZ2V0VHlwZSIsImlucHV0IiwiX2dldE9yUmV0dXJuQ3R4IiwicGFyc2VkVHlwZSIsIl9wcm9jZXNzSW5wdXRQYXJhbXMiLCJfcGFyc2VTeW5jIiwiX3BhcnNlIiwiX3BhcnNlQXN5bmMiLCJyZXNvbHZlIiwicGFyc2UiLCJzYWZlUGFyc2UiLCJhc3luYyIsImVyciIsInRvTG93ZXJDYXNlIiwicGFyc2VBc3luYyIsInNhZmVQYXJzZUFzeW5jIiwibWF5YmVBc3luY1Jlc3VsdCIsInJlZmluZSIsImNoZWNrIiwiZ2V0SXNzdWVQcm9wZXJ0aWVzIiwiX3JlZmluZW1lbnQiLCJzZXRFcnJvciIsInJlZmluZW1lbnQiLCJyZWZpbmVtZW50RGF0YSIsIlpvZEVmZmVjdHMiLCJzY2hlbWEiLCJ0eXBlTmFtZSIsIlpvZEZpcnN0UGFydHlUeXBlS2luZCIsImVmZmVjdCIsInN1cGVyUmVmaW5lIiwiZGVmIiwic3BhIiwiYmluZCIsIm9wdGlvbmFsIiwibnVsbGFibGUiLCJudWxsaXNoIiwib3IiLCJhbmQiLCJ0cmFuc2Zvcm0iLCJicmFuZCIsImRlZmF1bHQiLCJkZXNjcmliZSIsInBpcGUiLCJyZWFkb25seSIsImlzTnVsbGFibGUiLCJpc09wdGlvbmFsIiwidmVyc2lvbiIsInZlbmRvciIsInZhbGlkYXRlIiwiWm9kT3B0aW9uYWwiLCJab2ROdWxsYWJsZSIsIlpvZEFycmF5IiwiWm9kUHJvbWlzZSIsIm9wdGlvbiIsIlpvZFVuaW9uIiwiaW5jb21pbmciLCJab2RJbnRlcnNlY3Rpb24iLCJkZWZhdWx0VmFsdWVGdW5jIiwiWm9kRGVmYXVsdCIsImlubmVyVHlwZSIsImRlZmF1bHRWYWx1ZSIsIlpvZEJyYW5kZWQiLCJjYXRjaFZhbHVlRnVuYyIsIlpvZENhdGNoIiwiY2F0Y2hWYWx1ZSIsIlRoaXMiLCJ0YXJnZXQiLCJab2RQaXBlbGluZSIsIlpvZFJlYWRvbmx5IiwiY3VpZFJlZ2V4IiwiY3VpZDJSZWdleCIsInVsaWRSZWdleCIsInV1aWRSZWdleCIsIm5hbm9pZFJlZ2V4Iiwiand0UmVnZXgiLCJkdXJhdGlvblJlZ2V4IiwiZW1haWxSZWdleCIsIl9lbW9qaVJlZ2V4IiwiZW1vamlSZWdleCIsImlwdjRSZWdleCIsImlwdjRDaWRyUmVnZXgiLCJpcHY2UmVnZXgiLCJpcHY2Q2lkclJlZ2V4IiwiYmFzZTY0UmVnZXgiLCJiYXNlNjR1cmxSZWdleCIsImRhdGVSZWdleFNvdXJjZSIsImRhdGVSZWdleCIsIlJlZ0V4cCIsInRpbWVSZWdleFNvdXJjZSIsImFyZ3MiLCJzZWNvbmRzUmVnZXhTb3VyY2UiLCJwcmVjaXNpb24iLCJzZWNvbmRzUXVhbnRpZmllciIsInRpbWVSZWdleCIsImRhdGV0aW1lUmVnZXgiLCJyZWdleCIsIm9wdHMiLCJsb2NhbCIsIm9mZnNldCIsImlzVmFsaWRJUCIsImlwIiwidGVzdCIsImlzVmFsaWRKV1QiLCJqd3QiLCJhbGciLCJoZWFkZXIiLCJzcGxpdCIsImJhc2U2NCIsInBhZEVuZCIsImRlY29kZWQiLCJhdG9iIiwidHlwIiwiaXNWYWxpZENpZHIiLCJab2RTdHJpbmciLCJjb2VyY2UiLCJTdHJpbmciLCJjaGVja3MiLCJ0b29CaWciLCJ0b29TbWFsbCIsIlVSTCIsImxhc3RJbmRleCIsInRlc3RSZXN1bHQiLCJ0cmltIiwidG9VcHBlckNhc2UiLCJfcmVnZXgiLCJfYWRkQ2hlY2siLCJlbWFpbCIsInVybCIsImVtb2ppIiwidXVpZCIsIm5hbm9pZCIsImN1aWQiLCJjdWlkMiIsInVsaWQiLCJiYXNlNjR1cmwiLCJjaWRyIiwiZGF0ZXRpbWUiLCJ0aW1lIiwiZHVyYXRpb24iLCJtaW4iLCJtaW5MZW5ndGgiLCJtYXgiLCJtYXhMZW5ndGgiLCJsZW4iLCJub25lbXB0eSIsImlzRGF0ZXRpbWUiLCJjaCIsImlzRGF0ZSIsImlzVGltZSIsImlzRHVyYXRpb24iLCJpc0VtYWlsIiwiaXNVUkwiLCJpc0Vtb2ppIiwiaXNVVUlEIiwiaXNOQU5PSUQiLCJpc0NVSUQiLCJpc0NVSUQyIiwiaXNVTElEIiwiaXNJUCIsImlzQ0lEUiIsImlzQmFzZTY0IiwiaXNCYXNlNjR1cmwiLCJmbG9hdFNhZmVSZW1haW5kZXIiLCJzdGVwIiwidmFsRGVjQ291bnQiLCJzdGVwRGVjQ291bnQiLCJkZWNDb3VudCIsInZhbEludCIsInBhcnNlSW50IiwidG9GaXhlZCIsInN0ZXBJbnQiLCJwb3ciLCJab2ROdW1iZXIiLCJhcmd1bWVudHMiLCJndGUiLCJsdGUiLCJzZXRMaW1pdCIsImd0IiwibHQiLCJpbnQiLCJwb3NpdGl2ZSIsIm5lZ2F0aXZlIiwibm9ucG9zaXRpdmUiLCJub25uZWdhdGl2ZSIsImZpbml0ZSIsInNhZmUiLCJNSU5fU0FGRV9JTlRFR0VSIiwiTUFYX1NBRkVfSU5URUdFUiIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJpc0ludCIsIlpvZEJpZ0ludCIsIkJpZ0ludCIsIl9nZXRJbnZhbGlkSW5wdXQiLCJab2RCb29sZWFuIiwiQm9vbGVhbiIsIlpvZERhdGUiLCJnZXRUaW1lIiwibWluRGF0ZSIsIm1heERhdGUiLCJab2RTeW1ib2wiLCJab2RVbmRlZmluZWQiLCJab2ROdWxsIiwiWm9kQW55IiwiX2FueSIsIlpvZFVua25vd24iLCJfdW5rbm93biIsIlpvZE5ldmVyIiwibmV2ZXIiLCJab2RWb2lkIiwidm9pZCIsImV4YWN0TGVuZ3RoIiwiYWxsIiwiZWxlbWVudCIsImRlZXBQYXJ0aWFsaWZ5IiwiWm9kT2JqZWN0IiwibmV3U2hhcGUiLCJzaGFwZSIsImZpZWxkU2NoZW1hIiwidW53cmFwIiwiWm9kVHVwbGUiLCJfY2FjaGVkIiwibm9uc3RyaWN0IiwicGFzc3Rocm91Z2giLCJhdWdtZW50IiwiZXh0ZW5kIiwiX2dldENhY2hlZCIsInNoYXBlS2V5cyIsImV4dHJhS2V5cyIsImNhdGNoYWxsIiwidW5rbm93bktleXMiLCJrZXlWYWxpZGF0b3IiLCJzdHJpY3QiLCJfYyIsIl9kIiwic3RyaXAiLCJhdWdtZW50YXRpb24iLCJtZXJnZSIsIm1lcmdpbmciLCJtZXJnZWQiLCJzZXRLZXkiLCJpbmRleCIsInBpY2siLCJtYXNrIiwiZm9yRWFjaCIsIm9taXQiLCJkZWVwUGFydGlhbCIsInBhcnRpYWwiLCJyZXF1aXJlZCIsIm5ld0ZpZWxkIiwia2V5b2YiLCJjcmVhdGVab2RFbnVtIiwic3RyaWN0Q3JlYXRlIiwibGF6eWNyZWF0ZSIsImhhbmRsZVJlc3VsdHMiLCJjaGlsZEN0eCIsInR5cGVzIiwiZ2V0RGlzY3JpbWluYXRvciIsIlpvZExhenkiLCJab2RMaXRlcmFsIiwiWm9kRW51bSIsIlpvZE5hdGl2ZUVudW0iLCJlbnVtIiwiWm9kRGlzY3JpbWluYXRlZFVuaW9uIiwiZGlzY3JpbWluYXRvciIsImRpc2NyaW1pbmF0b3JWYWx1ZSIsIm9wdGlvbnNNYXAiLCJmcm9tIiwiZGlzY3JpbWluYXRvclZhbHVlcyIsIm1lcmdlVmFsdWVzIiwiYSIsImIiLCJhVHlwZSIsImJUeXBlIiwidmFsaWQiLCJiS2V5cyIsInNoYXJlZEtleXMiLCJpbmRleE9mIiwibmV3T2JqIiwic2hhcmVkVmFsdWUiLCJuZXdBcnJheSIsIml0ZW1BIiwiaXRlbUIiLCJoYW5kbGVQYXJzZWQiLCJwYXJzZWRMZWZ0IiwicGFyc2VkUmlnaHQiLCJsZWZ0IiwicmlnaHQiLCJyZXN0IiwiaXRlbUluZGV4Iiwic2NoZW1hcyIsIlpvZFJlY29yZCIsImtleVNjaGVtYSIsImtleVR5cGUiLCJ2YWx1ZVNjaGVtYSIsInZhbHVlVHlwZSIsInRoaXJkIiwiWm9kTWFwIiwiZW50cmllcyIsImZpbmFsTWFwIiwiWm9kU2V0IiwibWluU2l6ZSIsInNpemUiLCJtYXhTaXplIiwiZmluYWxpemVTZXQiLCJlbGVtZW50cyIsInBhcnNlZFNldCIsImFkZCIsInZhbHVlcyIsIlpvZEZ1bmN0aW9uIiwiaW1wbGVtZW50IiwibWFrZUFyZ3NJc3N1ZSIsIm1ha2VSZXR1cm5zSXNzdWUiLCJyZXR1cm5zIiwiZm4iLCJtZSIsInBhcnNlZEFyZ3MiLCJSZWZsZWN0IiwiYXBwbHkiLCJwYXJzZWRSZXR1cm5zIiwicGFyYW1ldGVycyIsInJldHVyblR5cGUiLCJmdW5jIiwidmFsaWRhdGVkRnVuYyIsInN0cmljdEltcGxlbWVudCIsImdldHRlciIsImxhenlTY2hlbWEiLCJleHBlY3RlZFZhbHVlcyIsImVudW1WYWx1ZXMiLCJWYWx1ZXMiLCJFbnVtIiwiZXh0cmFjdCIsIm5ld0RlZiIsImV4Y2x1ZGUiLCJvcHQiLCJXZWFrTWFwIiwibmF0aXZlRW51bVZhbHVlcyIsInByb21pc2lmaWVkIiwic291cmNlVHlwZSIsImNoZWNrQ3R4IiwiYXJnIiwiZmF0YWwiLCJwcm9jZXNzZWQiLCJleGVjdXRlUmVmaW5lbWVudCIsImFjYyIsImlubmVyIiwiYmFzZSIsImNyZWF0ZVdpdGhQcmVwcm9jZXNzIiwicHJlcHJvY2VzcyIsInJlbW92ZURlZmF1bHQiLCJuZXdDdHgiLCJyZW1vdmVDYXRjaCIsIlpvZE5hTiIsIkJSQU5EIiwiU3ltYm9sIiwiaGFuZGxlQXN5bmMiLCJpblJlc3VsdCIsImluIiwib3V0IiwiY2xlYW5QYXJhbXMiLCJwIiwicDIiLCJfcGFyYW1zIiwiciIsIl9mYXRhbCIsImxhdGUiLCJpbnN0YW5jZU9mVHlwZSIsImNscyIsInN0cmluZ1R5cGUiLCJudW1iZXJUeXBlIiwibmFuVHlwZSIsImJpZ0ludFR5cGUiLCJib29sZWFuVHlwZSIsImRhdGVUeXBlIiwic3ltYm9sVHlwZSIsInVuZGVmaW5lZFR5cGUiLCJudWxsVHlwZSIsImFueVR5cGUiLCJ1bmtub3duVHlwZSIsIm5ldmVyVHlwZSIsInZvaWRUeXBlIiwiYXJyYXlUeXBlIiwib2JqZWN0VHlwZSIsInN0cmljdE9iamVjdFR5cGUiLCJ1bmlvblR5cGUiLCJkaXNjcmltaW5hdGVkVW5pb25UeXBlIiwiaW50ZXJzZWN0aW9uVHlwZSIsInR1cGxlVHlwZSIsInJlY29yZFR5cGUiLCJtYXBUeXBlIiwic2V0VHlwZSIsImZ1bmN0aW9uVHlwZSIsImxhenlUeXBlIiwibGl0ZXJhbFR5cGUiLCJlbnVtVHlwZSIsIm5hdGl2ZUVudW1UeXBlIiwicHJvbWlzZVR5cGUiLCJlZmZlY3RzVHlwZSIsIm9wdGlvbmFsVHlwZSIsIm51bGxhYmxlVHlwZSIsInByZXByb2Nlc3NUeXBlIiwicGlwZWxpbmVUeXBlIiwib3N0cmluZyIsIm9udW1iZXIiLCJvYm9vbGVhbiIsIk5FVkVSIiwieiIsImRlZmF1bHRFcnJvck1hcCIsIlpvZFRyYW5zZm9ybWVyIiwiU2NoZW1hIiwiWm9kU2NoZW1hIiwiYW55IiwiZGlzY3JpbWluYXRlZFVuaW9uIiwiaW50ZXJzZWN0aW9uIiwibGF6eSIsImxpdGVyYWwiLCJuYXRpdmVFbnVtIiwicGlwZWxpbmUiLCJyZWNvcmQiLCJzdHJpY3RPYmplY3QiLCJ0cmFuc2Zvcm1lciIsInR1cGxlIiwidW5pb24iLCJpbnN0YW5jZW9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/zod/lib/index.mjs\n");

/***/ })

};
;